[
["index.html", "Faunalytics - Wildlife trade dataset Chapter 1 Introduction", " Faunalytics - Wildlife trade dataset 2020-08-19 Chapter 1 Introduction The aim of this study is to analyze United States wildlife and wildlife product imports. For this purpose, we’ll review 15 years (2000-2014) of data from the Law Enforcement Managment Information System (LEMIS), originally collected by the United States Fish and Wildlife Service (USFWS), cleaned and stored into a R package called lemis by EcoHealth Alliance. You can find more information more about this dataset Here The data collected by EcoHealth Alliance include includes records of plants, microorganisms and animals, among others. For this analysis, we’ll exclude those elements belonging to fungi, plantae, bacteria, chromista and unspecified kingdoms, considering only those organisms of the Kingdom Animalia. Between January 01, 2000, and December 31, 2014, around 2 millions wildlife shipments were imported into the United States, involving around 11,4 billions and 1,1 billion kg of wildlife items. A shipment refers to any container or group of containers that share a common control number, country of shipment and shipment date. Each shipment may be represented in the lemis dataset by multiple segments or rows, because the contents are derived from more than one species or type of product. We will analyze the data based on different topics and trends. We’ll analyze the number of shipments, as well as their volume and content. "],
["data-quality-cleaning.html", "Chapter 2 Data quality &amp; cleaning 2.1 Missing values 2.2 Excluding plants and microorganisms", " Chapter 2 Data quality &amp; cleaning 2.1 Missing values Only four variables have more than 30% missing values. Most of them are below 10% # Are there missing values? missing_values &lt;- data %&gt;% gather(key = &quot;key&quot;, value = &quot;val&quot;) %&gt;% mutate(is_missing = is.na(val)) %&gt;% group_by(key, is_missing) %&gt;% summarise(num_missing = n()/nrow(data) *100) %&gt;% filter(is_missing==T) %&gt;% select(-is_missing) %&gt;% arrange(desc(num_missing)) plot_ly(missing_values, x=~reorder(key, desc(num_missing)), y=~num_missing, color=~key) %&gt;% add_bars() %&gt;% add_text(text=~round(num_missing),textposition = &#39;top&#39;) %&gt;% layout(title = &quot;&lt;b&gt;Missing values per variable&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Variable&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Number of missing values&lt;/b&gt;&quot;)) rm(missing_values) 2.1.1 Missing values in “value” year over year If we have a look at the “value” variable (dollars), we can notice that there isn’t enough information about it in the data produced between 2008-2011 and 2013-2014. Specifically, the years 2008, 2009, 2010 and 2014 only contain missing values missing_value&lt;- data %&gt;% select(shipment_year, value) %&gt;% group_by(shipment_year) %&gt;% summarise(missing = sum(is.na(value)/n())*100, complete= round(100 - sum(is.na(value)/n())*100,2)) %&gt;% gather(&quot;key&quot;, &quot;percentage&quot;, missing, complete) ggplot(data=missing_value, aes(x=shipment_year, y=percentage, fill=key)) + geom_bar(position = &quot;dodge&quot;, stat = &quot;identity&quot;) + theme_bw() + facet_grid(~shipment_year,scales = &quot;free_x&quot;) + scale_fill_manual(values=c(&quot;springgreen4&quot;, &quot;rosybrown&quot;)) + labs(title = &quot;Figure 41: Missing values in the import (dollars) per shipment year&quot;) rm(missing_value) 2.2 Excluding plants and microorganisms We classified 98.93 % of data by kingdoms using the class, taxa and genus columns. This way, we excluded those elements belonging to fungi, plantae, bacteria, chromista and unspecified kingdoms. Bacterias: Gammaproteobacteria Chromista: Phaeophyceae Plantae: Cycadopsida, Liliopsida, Magnoliopsida, Pinopsida, Polypodiopsida Fungi: Agaricomycetes, Chytridiomycetes Animalia: Actinopterygii, Amphibia, Anthozoa, Arachnida, Ascidiacea, Asteroidea, Aves, Bivalvia, Branchiopoda, Calcarea, Cephalaspidomorphi, Cephalopoda, Cestoda, Chilopoda, Clitellata, Cubozoa, Demospongiae, Diplopoda, Echinoidea, Elasmobranchii, Enteropneusta, Eurotatoria,Gastropoda, Gymnolaemata, Hexactinellida, Hexanauplia, Holocephali, Holothuroidea, Hoplonemertea, Hydrozoa, Insecta, Leptocardii, Malacostraca, Mammalia, Maxillopoda,Merostomata, Myxini, Ophiuroidea, Ostracoda, Pilidiophora, Polychaeta, Polyplacophora, Pycnogonida, Reptilia, Sarcopterygii, Scaphopoda, Scyphozoa, Secernentea, Sipunculidea, Tentaculata, Thaliacea, Trematoda # classifying classes by kingdom classes&lt;-data %&gt;% drop_na(class) %&gt;% group_by(class) %&gt;% summarise(N=n()) animalia_kingdom &lt;- c(&quot;Actinopterygii&quot;, &quot;Amphibia&quot;, &quot;Anthozoa&quot;, &quot;Arachnida&quot;, &quot;Ascidiacea&quot;, &quot;Asteroidea&quot;, &quot;Aves&quot;, &quot;Bivalvia&quot;, &quot;Branchiopoda&quot;, &quot;Calcarea&quot;, &quot;Cephalaspidomorphi&quot;, &quot;Cephalopoda&quot;, &quot;Cestoda&quot;, &quot;Chilopoda&quot;, &quot;Clitellata&quot;, &quot;Crinoidea&quot;, &quot;Cubozoa&quot;, &quot;Demospongiae&quot;, &quot;Diplopoda&quot;, &quot;Echinoidea&quot;, &quot;Elasmobranchii&quot;, &quot;Enteropneusta&quot;, &quot;Eurotatoria&quot;, &quot;Gastropoda&quot;, &quot;Gymnolaemata&quot;, &quot;Hexactinellida&quot;,&quot;Hexanauplia&quot;, &quot;Holocephali&quot;, &quot;Holothuroidea&quot;, &quot;Hoplonemertea&quot;, &quot;Hydrozoa&quot;, &quot;Insecta&quot;, &quot;Leptocardii&quot;, &quot;Malacostraca&quot;, &quot;Mammalia&quot;, &quot;Maxillopoda&quot;, &quot;Merostomata&quot;, &quot;Myxini&quot;, &quot;Ophiuroidea&quot;, &quot;Ostracoda&quot;, &quot;Pilidiophora&quot;, &quot;Polychaeta&quot;, &quot;Polyplacophora&quot;, &quot;Pycnogonida&quot;, &quot;Reptilia&quot;, &quot;Sarcopterygii&quot;, &quot;Scaphopoda&quot;, &quot;Scyphozoa&quot;, &quot;Secernentea&quot;, &quot;Sipunculidea&quot;, &quot;Tentaculata&quot;, &quot;Thaliacea&quot;, &quot;Trematoda&quot;) fungi_kingdom &lt;-c(&quot;Agaricomycetes&quot;, &quot;Chytridiomycetes&quot;) plantae_kingdom&lt;- c(&quot;Cycadopsida&quot;, &quot;Liliopsida&quot;, &quot;Magnoliopsida&quot;, &quot;Pinopsida&quot;, &quot;Polypodiopsida&quot;, &quot;Ulvophyceae&quot;) bacterias_kingdom &lt;- c(&quot;Gammaproteobacteria&quot;) chromista_kingdom &lt;- c(&quot;Phaeophyceae&quot;) # Adding kingdom level based on class data$kingdom&lt;- ifelse(data$class %in% animalia_kingdom, &quot;Animalia&quot;, ifelse(data$class %in% fungi_kingdom, &quot;Fungi&quot;, ifelse(data$class %in% plantae_kingdom, &quot;Plantae&quot;, ifelse(data$class %in% bacterias_kingdom, &quot;Bacteria&quot;, ifelse(data$class %in% chromista_kingdom, &quot;Chromista&quot;, &quot;Other&quot; ))))) # 403,596 unclassified # Adding kingdom level based on genus data$kingdom[which(data$genus==&quot;Other live inverts&quot; | data$genus==&quot;Animals&quot; | data$genus==&quot;Corals&quot;| data$genus==&quot;Dugesia&quot;| data$genus==&quot;Nemertea&quot; | data$genus==&quot;Mollusca&quot; | data$genus==&quot;Xenoturbella&quot; | data$genus==&quot;Chondrichthyes&quot; | data$genus==&quot;Chordata&quot; | data$genus==&quot;Paracatenula&quot; | data$genus==&quot;Porifera&quot;)] &lt;- &quot;Animalia&quot; # 299,674 unclassified # Adding kingdom level based on taxa data$kingdom[which(data$taxa==&quot;crustacean&quot; | data$taxa==&quot;fish&quot; | data$taxa==&quot;coral&quot;| data$taxa==&quot;shell&quot;)] &lt;- &quot;Animalia&quot; # 58,883 unclassified data$kingdom[which(data$taxa==&quot;plant&quot;)] &lt;- &quot;Plantae&quot; # 58,855 unclassified # Let&#39;s exclude those elements from fungi, plantae, bacteria, chromista and unspecified kingdoms. data &lt;- data %&gt;% filter(kingdom==&quot;Animalia&quot;) # 5,512,706 --&gt; 5,451,832 rows rm(classes, animalia_kingdom, bacterias_kingdom, chromista_kingdom, plantae_kingdom, fungi_kingdom) # RENAMING data &lt;- data %&gt;% # Renaming units mutate(unit = recode(unit, &quot;NO&quot; = &quot;Number&quot;, &quot;KG&quot; = &quot;Kilograms&quot;, &quot;GM&quot;= &quot;Grams&quot;, &quot;M2&quot;=&quot;Square_meters&quot;, &quot;LT&quot;= &quot;Liters&quot;, &quot;ML&quot;= &quot;Milliliters&quot;, &quot;MT&quot;=&quot;Meters&quot;, &quot;CM&quot; = &quot;Centimeters&quot;, &quot;C3&quot;= &quot;Cubic_centimeters&quot;, &quot;C2&quot;=&quot;Square_centimeters&quot;, &quot;MG&quot;=&quot;Miligrams&quot;, &quot;M3&quot;=&quot;Cubic_meters&quot;), # Renaming import_export import_export = recode(import_export, &quot;I&quot; = &quot;Import&quot;), # Renaming levels action = recode(action, &quot;C&quot; = &quot;Cleared&quot;, &quot;R&quot;= &quot;Refused&quot;), # Renaming countries country_origin = countrycode(country_origin, &quot;iso2c&quot;, &quot;country.name&quot;, nomatch = NULL), country_origin = recode(country_origin, &quot;AN&quot; = &quot;Netherlands Antilles&quot;, &quot;XX&quot; = &quot;Unknown&quot;,&quot;ZZ&quot; = &quot;High Seas&quot;), country_imp_exp = countrycode(country_imp_exp, &quot;iso2c&quot;, &quot;country.name&quot;, nomatch = NULL), country_imp_exp = recode(country_imp_exp, &quot;AN&quot; = &quot;Netherlands Antilles&quot;, &quot;XX&quot; = &quot;Unknown&quot;,&quot;ZZ&quot; = &quot;High Seas&quot;), # Renaming ports port = recode(port, &quot;AG&quot; = &quot;Agana, GU&quot;, &quot;AL&quot; = &quot;Alcan, AK&quot;, &quot;AN&quot; = &quot;Anchorage, AK&quot;, &quot;AT&quot; = &quot;Atlanta, GA&quot;, &quot;BA&quot; = &quot;Baltimore, MD&quot;, &quot;BL&quot; = &quot;Blaine, WA&quot;, &quot;BN&quot; = &quot;Buffalo/Niagara Falls, NY&quot;, &quot;BO&quot; = &quot;Boston, MA&quot;, &quot;BV&quot; = &quot;Brownsville, TX&quot;, &quot;CA&quot; = &quot;Calais, ME&quot;, &quot;CH&quot; = &quot;Chicago, IL&quot;, &quot;CL&quot; = &quot;Cleveland, OH&quot;, &quot;CP&quot; = &quot;Champlain, NY&quot;, &quot;CX&quot; = &quot;Calexico, CA&quot;, &quot;DF&quot; = &quot;Dallas/Fort Worth, TX&quot;, &quot;DE&quot; = &quot;Detroit, MI&quot;, &quot;DG&quot; = &quot;Douglas, AZ&quot;, &quot;DL&quot; = &quot;Derby Line, VT&quot;, &quot;DN&quot; = &quot;Denver, CO&quot;, &quot;DR&quot; = &quot;Del Rio, TX&quot; , &quot;DS&quot; = &quot;Dunseith, ND&quot;, &quot;DU&quot; = &quot;Dulles, VA&quot;, &quot;EA&quot; = &quot;Eastport, ID&quot;, &quot;EL&quot; = &quot;El Paso, TX&quot;, &quot;FB&quot; = &quot;Fairbanks, AK&quot;, &quot;GP&quot; = &quot;Grand Portage, MN&quot;, &quot;HO&quot; = &quot;Houlton, ME&quot;, &quot;HA&quot; = &quot;Honolulu, HI&quot;,&quot;HN&quot;= &quot;Houston, TX&quot;, &quot;HS&quot; = &quot;Highgate Springs, VT&quot;, &quot;IF&quot; = &quot;International Falls, MN&quot;, &quot;JK&quot; = &quot;Jackman, ME&quot;, &quot;JU&quot; = &quot;Juneau, AK&quot;,&quot;LK&quot; = &quot;Lukeville, AZ&quot;, &quot;LA&quot; = &quot;Los Angeles, CA&quot;, &quot;LO&quot; = &quot;Louisville, KY &quot;,&quot;LR&quot; = &quot;Laredo, TX&quot;, &quot;LV&quot; = &quot;Las Vegas, NV&quot;, &quot;MC&quot; = &quot;McAllen, TX&quot;, &quot;ME&quot; = &quot;Memphis, TN&quot;, &quot;MI&quot; = &quot;Miami, FL&quot;,&quot;MP&quot; = &quot;Minneapolis/St. Paul, MN&quot;, &quot;NY&quot; = &quot;New York, NY&quot;, &quot;NW&quot; = &quot;Newark, NJ&quot;,&quot;NF&quot; = &quot;Norfolk, VA&quot;, &quot;NG&quot; = &quot;Nogales, AZ&quot;, &quot;NO&quot; = &quot;New Orleans, LA&quot;, &quot;PA&quot; = &quot;Philadelphia, PA&quot;, &quot;PB&quot; = &quot;Pembina, ND&quot;, &quot;PH&quot; = &quot;Port Huron, MI&quot;, &quot;PL&quot; = &quot;Portal, ND&quot;, &quot;PT&quot; = &quot;Portland, OR&quot;, &quot;PX&quot; = &quot;Phoenix, AZ&quot;, &quot;RY&quot; = &quot;Raymond, MT&quot;, &quot;SF&quot; = &quot;San Francisco, CA&quot;,&quot;SE&quot; = &quot;Seattle, WA&quot;, &quot;SJ&quot; = &quot;San Juan, PR&quot;, &quot;SL&quot; = &quot;San Luis, AZ&quot;, &quot;SP&quot; = &quot;Saipan, MP&quot;, &quot;SS&quot; = &quot;Sault Saint Marie, MI&quot;, &quot;SU&quot; = &quot;Sumas, WA&quot;, &quot;SW&quot; = &quot;Sweetgrass, MT&quot;, &quot;SY&quot; = &quot;San Diego/San Ysidro, CA&quot;, &quot;TP&quot; = &quot;Tampa, FL&quot;, &quot;XX&quot; = &quot;Unknown&quot;, &quot;1&quot;= &quot;Region 1 - Other&quot;, &quot;2&quot;= &quot;Region 2 - Other&quot;,&quot;3&quot;= &quot;Region 3 - Other&quot;, &quot;4&quot;= &quot;Region 4 - Other&quot;,&quot;5&quot;= &quot;Region 5 - Other&quot;,&quot;6&quot;= &quot;Region 6 - Other&quot;, &quot;7&quot;= &quot;Region 7 - Other&quot;,&quot;8&quot;= &quot;Region 8 - Other&quot;), # Renaming descriptions description = recode(description, &quot;BAL&quot; = &quot;Baleen&quot;, &quot;BAR&quot; = &quot;Bark&quot;, &quot;BOC&quot; = &quot;Bone product&quot;, &quot;BOD&quot; = &quot;Dead animal&quot;, &quot;BON&quot; = &quot;Bone&quot;, &quot;BOP&quot; = &quot;Bone piece&quot;, &quot;CAL&quot; = &quot;Calipee&quot;, &quot;CAP&quot; = &quot;Carapace&quot;, &quot;CAR&quot; = &quot;Carving&quot;, &quot;CAV&quot; = &quot;Caviar&quot;, &quot;CLA&quot; = &quot;Claw&quot;, &quot;CLO&quot;= &quot;Cloth&quot;, &quot;COR&quot; = &quot;Coral&quot;, &quot;CPR&quot; = &quot;Coral product&quot;, &quot;CUL&quot; = &quot;Culture of an artificially propagated plant&quot;, &quot;CUT&quot; = &quot;Cutting&quot;, &quot;DEA&quot; = &quot;Dead Specimen (died during shipment)&quot;, &quot;DER&quot; = &quot;Derivative&quot;, &quot;DPL&quot; = &quot;Dried plant&quot;, &quot;EAR&quot; = &quot;Ear&quot;, &quot;EGG&quot; = &quot;Egg (dead or blown)&quot;, &quot;EGL&quot; = &quot;Egg (live)&quot;, &quot;ESH&quot; = &quot;Eggshell&quot;, &quot;EXT&quot; = &quot;Extract&quot;, &quot;FEA&quot;= &quot;Feather&quot;, &quot;FIB&quot; = &quot;Fiber&quot;, &quot;FIG&quot; = &quot;Fingerling&quot;, &quot;FIN&quot; = &quot;Fin&quot;, &quot;FLO&quot; = &quot;Flower&quot;, &quot;FOO&quot; = &quot;Foot&quot;, &quot;GAB&quot; = &quot;Gall bladder&quot;, &quot;GAL&quot; = &quot;Gall&quot;, &quot;GAR&quot; = &quot;Garment&quot;, &quot;GEN&quot; = &quot;Genitalia&quot;, &quot;GRS&quot; = &quot;Graft rootstock&quot;, &quot;HAI&quot; = &quot;Hair&quot;, &quot;HAP&quot; = &quot;Hair product&quot; , &quot;HOC&quot; = &quot;Horn carving&quot;, &quot;HOP&quot; = &quot;Horn piece&quot;, &quot;HOR&quot; = &quot;Horn&quot;, &quot;IJW&quot; = &quot;Ivory jewelry&quot;, &quot;IVC&quot; =&quot;Ivory carving&quot;, &quot;IVP&quot; = &quot;Ivory piece&quot;, &quot;JWL&quot; = &quot;Jewelry&quot;, &quot;KEY&quot; = &quot;Ivory piano key&quot;, &quot;LPL&quot; = &quot;Leather product (large)&quot;, &quot;LPS&quot; = &quot;Leather product (small)&quot;,&quot;LEG&quot; = &quot;Frog leg&quot;, &quot;LIV&quot; = &quot;Live specimen&quot;, &quot;LVS&quot; = &quot;Leaves&quot;, &quot;MEA&quot; = &quot;Meat&quot;, &quot;MED&quot; = &quot;Medicinal part or product&quot;, &quot;MUS&quot; = &quot;Musk&quot;, &quot;NES&quot; = &quot;Nest&quot;, &quot;OIL&quot; = &quot;Oil&quot;, &quot;PIV&quot; = &quot;Piano with ivory keys&quot;, &quot;PLA&quot; = &quot;Plate of fur skins&quot;, &quot;PLY&quot; = &quot;Plywood&quot;, &quot;POW&quot; = &quot;Powder&quot;, &quot;ROC&quot; = &quot;Coral rock (live rock)&quot;, &quot;RUG&quot; = &quot;Rug&quot;, &quot;SAW&quot; = &quot;Sawn wood&quot;, &quot;SCA&quot; = &quot;Scale&quot;, &quot;SEE&quot; = &quot;Seed&quot;, &quot;SHE&quot; = &quot;Shell&quot;,&quot;SPR&quot; = &quot;Shell product&quot;, &quot;SHO&quot; = &quot;Shoe&quot;, &quot;SID&quot; = &quot;Side&quot;, &quot;SKE&quot; = &quot;Skeleton&quot;, &quot;SKI&quot; = &quot;Skin&quot;, &quot;SKP&quot; = &quot;Skin piece&quot;, &quot;SKU&quot; = &quot;Skull&quot;, &quot;SOU&quot; = &quot;Soup&quot;, &quot;SPE&quot; = &quot;Specimen (scientific or museum)&quot;, &quot;STE&quot; = &quot;Stem (plant)&quot;, &quot;SWI&quot; = &quot;Swim bladder&quot;, &quot;TAI&quot; = &quot;Tail&quot;, &quot;TEE&quot; = &quot;Teeth&quot;, &quot;TIM&quot; = &quot;Timber&quot;, &quot;TRI&quot; = &quot;Trim&quot;, &quot;TRO&quot; = &quot;Trophy&quot;, &quot;TUS&quot; = &quot;Tusk&quot;, &quot;UNS&quot; = &quot;Unspecified&quot;, &quot;VEN&quot; = &quot;Veneer&quot;, &quot;WAX&quot; = &quot;Wax&quot;, &quot;WNG&quot; = &quot;Wing&quot;, &quot;WPR&quot; = &quot;Wood product&quot;), # Renaming purposes purpose = recode(purpose, &quot;B&quot; = &quot;Breeding in captivity/artif. propag.&quot;, &quot;E&quot; = &quot;Educational&quot;, &quot;G&quot; = &quot;Botanical Gardens&quot;, &quot;H&quot; = &quot;Hunting trophies&quot;, &quot;M&quot; = &quot;Biomedical research&quot;, &quot;P&quot; = &quot;Personal&quot;, &quot;Q&quot; = &quot;Circuses/traveling exhibitions&quot;, &quot;S&quot; = &quot;Scientific&quot;, &quot;T&quot; = &quot;Commercial&quot;, &quot;Y&quot; = &quot;Reintrod./introd. into the wild&quot;, &quot;Z&quot; = &quot;Zoos&quot;, &quot;L&quot; = &quot;Law Enforcement/Judicial/Forensic use&quot;, &quot;non-standard value&quot; = &quot;Others&quot;), # Renaming disposition disposition = recode(disposition, &quot;C&quot; = &quot;Cleared&quot;, &quot;S&quot; = &quot;Seized&quot;, &quot;A&quot; = &quot;Abandoned&quot;, &quot;R&quot; = &quot;Reexport&quot;, &quot;non-standard value&quot; = &quot;Others&quot;), # Renaming sources source = recode(source, &quot;W&quot; = &quot;Specimens taken from the wild&quot;, &quot;C&quot; = &quot;Animals bred in captivity&quot;, &quot;R&quot; = &quot;Specimens orig. from a ranching op.&quot;, &quot;F&quot; = &quot;Animals born in captivity/not captive-bred&quot;, &quot;U&quot; = &quot;Source unknown&quot;, &quot;D&quot; = &quot;commercially bred or propagated in CITES&quot;, &quot;I&quot; = &quot;Confiscated or seized specimens&quot;, &quot;A&quot; = &quot;Plants art. propagated&quot;, &quot;P&quot; = &quot;Others&quot;, &quot;non-standard value&quot; = &quot;Others&quot;)) # NEW VARIABLES # Corporations data$corporation&lt;- # Fashion/Luxury/Design products ifelse(grepl(&quot;prada&quot;, data$us_co, ignore.case = TRUE), &quot;Prada&quot;, ifelse(grepl(&quot;ralph lauren&quot;, data$us_co, ignore.case = TRUE), &quot;Ralph Lauren&quot;, ifelse(grepl(&quot;LOUIS VUITTON&quot;, data$us_co, ignore.case = TRUE), &quot;Louis Vuitton&quot;, ifelse(grepl(&quot;MONCLER&quot;, data$us_co, ignore.case = TRUE), &quot;Moncler&quot;, ifelse(grepl(&quot;BOTTEGA VENETA&quot;, data$us_co, ignore.case = TRUE), &quot;Bottega Veneta&quot;, ifelse(grepl(&quot;RICHEMONT&quot;, data$us_co, ignore.case = TRUE), &quot;Richemont&quot;, ifelse(grepl(&quot;FENDI&quot;, data$us_co, ignore.case = TRUE), &quot;Fendi&quot;, ifelse(grepl(&quot;HERMES&quot;, data$us_co, ignore.case = TRUE), &quot;Hermès&quot;, ifelse(grepl(&quot;GUCCI&quot;, data$us_co, ignore.case = TRUE), &quot;Gucci&quot;, ifelse(grepl(&quot;Beeline&quot;, data$us_co, ignore.case = TRUE), &quot;Beeline Group&quot;, ifelse(grepl(&quot;fossil partner&quot;, data$us_co, ignore.case = TRUE), &quot;Fossil Partners, L.P.&quot;, ifelse(grepl(&quot;dfs&quot;, data$us_co, ignore.case = TRUE), &quot;DFS Group&quot;, ifelse(grepl(&quot;gluck&quot;, data$us_co, ignore.case = TRUE), &quot;E. Gluck Corporation&quot;, ifelse(grepl(&quot;ferragamo&quot;, data$us_co, ignore.case = TRUE), &quot;Salvatore Ferragamo&quot;, ifelse(grepl(&quot;jacadi&quot;, data$us_co, ignore.case = TRUE), &quot;Jacadi&quot;, ifelse(grepl(&quot;bomac&quot;, data$us_co, ignore.case = TRUE), &quot;Bomac International Corp&quot;, ifelse(data$us_co %in% c(&quot;PIER I IMPORTS, INC.&quot;, &quot;PIER 1 IMPORTS, INC. &quot;), &quot;Pier 1&quot;, # Museums ifelse(grepl(&quot;museum&quot;, data$us_co, ignore.case = TRUE), &quot;Museums&quot;, ifelse(grepl(&quot;smithsonian&quot;, data$us_co, ignore.case = TRUE), &quot;Museums&quot;, # Animals or animal products providers ifelse(grepl(&quot;SEA DWELLING&quot;, data$us_co, ignore.case = TRUE), &quot;Sea Dwelling creatures&quot;, ifelse(grepl(&quot;HIPPOCAMPE&quot;, data$us_co, ignore.case = TRUE), &quot;Hippocampe USA&quot;, ifelse(grepl(&quot;AQUA-NAUTIC&quot;, data$us_co, ignore.case = TRUE), &quot;Aqua Nautic Specialist&quot;, ifelse(grepl(&quot;UNDERWATER WORLD&quot;, data$us_co, ignore.case = TRUE), &quot;Underwater World&quot;, ifelse(grepl(&quot;GOLDEN INA&quot;, data$us_co, ignore.case = TRUE), &quot;Golden Ina&quot;, ifelse(grepl(&quot;QUALITY MARINE&quot;, data$us_co, ignore.case = TRUE), &quot;Quality Marine&quot;, ifelse(grepl(&quot;Arsian&quot;, data$us_co, ignore.case = TRUE), &quot;Arsian Imports&quot;, ifelse(grepl(&quot;aquarium arts&quot;, data$us_co, ignore.case = TRUE), &quot;Aquarium Arts&quot;, ifelse(grepl(&quot;WALT SMITH&quot;, data$us_co, ignore.case = TRUE), &quot;Walt Smith International&quot;, ifelse(grepl(&quot;all seas fisheries&quot;, data$us_co, ignore.case = TRUE), &quot;Allseas Fisheries&quot;, ifelse(grepl(&quot;sun pet ltd&quot;, data$us_co, ignore.case = TRUE), &quot;Sun Pet LTD&quot;, ifelse(grepl(&quot;pacific aqua farms&quot;, data$us_co, ignore.case = TRUE), &quot;Pacific Aquafarms&quot;, ifelse(grepl(&quot;INTINENTAL&quot;, data$us_co, ignore.case = TRUE), &quot;Intinental Pri&quot;, ifelse(grepl(&quot;AQUACO&quot;, data$us_co, ignore.case = TRUE), &quot;Aquaco&quot;, ifelse(grepl(&quot;all seas marine&quot;, data$us_co, ignore.case = TRUE), &quot;Allseas Marine&quot;, ifelse(grepl(&quot;transship discounts&quot;, data$us_co, ignore.case = TRUE), &quot;Transship Discounts LTD&quot;, ifelse(grepl(&quot;SEGREST FARMS&quot;, data$us_co, ignore.case = TRUE), &quot;Segrest Farms&quot;, ifelse(grepl(&quot;fish head&quot;, data$us_co, ignore.case = TRUE), &quot;Fish Heads Inc&quot;, ifelse(grepl(&quot;holiday coral&quot;, data$us_co, ignore.case = TRUE), &quot;Holiday Coral Inc&quot;, ifelse(grepl(&quot;pacific island imp&quot;, data$us_co, ignore.case = TRUE), &quot;Pacific Island Imports&quot;, ifelse(grepl(&quot;PAN OCEAN AQUARIUM&quot;, data$us_co, ignore.case = TRUE), &quot;Pan Ocean Aquarium, Inc&quot;, ifelse(grepl(&quot;SALTWATER INC.&quot;, data$us_co, ignore.case = TRUE), &quot;Saltwater Inc&quot;, ifelse(grepl(&quot;saltwaterfish&quot;, data$us_co, ignore.case = TRUE), &quot;Saltwaterfish&quot;, ifelse(grepl(&quot;golden sea int&quot;, data$us_co, ignore.case = TRUE), &quot;Golden Sea Inc&quot;, ifelse(grepl(&quot;strictly reptiles&quot;, data$us_co, ignore.case = TRUE), &quot;Strictly Reptiles Inc&quot;, ifelse(grepl(&quot;emark tropical&quot;, data$us_co, ignore.case = TRUE), &quot;Emark Tropical Imports, Inc&quot;, ifelse(data$us_co %in% c(&quot;DOLPHIN INTERNATIONAL&quot;, &quot;DOLPHIN INT&#39;L&quot;, &quot;DOLPHIN INTERNAITONAL&quot;), &quot;Dolphin International&quot;, ifelse(data$us_co %in% c(&quot;a &amp; m aquatics&quot;, &quot;A&amp;M AQUATICS&quot;), &quot;A&amp;M Aquatics&quot;, ifelse(data$us_co %in% c(&quot;LPS LLC&quot;, &quot;LPS, LLC&quot;, &quot;LPS&quot;), &quot;LPS LLC&quot;, ifelse(data$us_co %in% c(&quot;APET, INC&quot;, &quot;APET INC&quot;), &quot;Apet Inc&quot;, &quot;Other&quot;))))))))))))))))))))))))))))))))))))))))))))))))) ## Let&#39;s classify these corporations corp_fashion&lt;- c(&quot;Beeline Group&quot;, &quot;Bomac International Corp&quot;, &quot;Bottega Veneta&quot;, &quot;DFS Group&quot;,&quot;E. Gluck Corporation&quot;, &quot;Fendi&quot;, &quot;Fossil Partners, L.P.&quot;, &quot;Gucci&quot;, &quot;Hermès&quot;, &quot;Jacadi&quot;, &quot;Louis Vuitton&quot;,&quot;Moncler&quot;, &quot;Pier 1&quot;,&quot;Prada&quot;, &quot;Ralph Lauren&quot;, &quot;Richemont&quot;, &quot;Salvatore Ferragamo&quot;) corp_animalproviders&lt;-c(&quot;A&amp;M Aquatics&quot;, &quot;Aqua Nautic Specialist&quot;, &quot;Aquaco&quot;, &quot;Aquarium Arts&quot;, &quot;Allseas Fisheries&quot;, &quot;Allseas Marine&quot;, &quot;Apet Inc&quot;, &quot;Arsian Imports&quot;, &quot;Dolphin International&quot;, &quot;Emark Tropical Imports, Inc&quot;, &quot;Fish Heads Inc&quot;, &quot;Golden Ina&quot;, &quot;Golden Sea Inc&quot;, &quot;Hippocampe USA&quot;, &quot;Holiday Coral Inc&quot;, &quot;Intinental Pri&quot;, &quot;LPS LLC&quot;, &quot;Pacific Aquafarms&quot;, &quot;Pacific Island Imports&quot;, &quot;Pan Ocean Aquarium, Inc&quot;, &quot;Quality Marine&quot;, &quot;Saltwater Inc&quot;, &quot;Saltwaterfish&quot;, &quot;Sea Dwelling creatures&quot;, &quot;Segrest Farms&quot;, &quot;Strictly Reptiles Inc&quot;, &quot;Sun Pet LTD&quot;, &quot;Transship Discounts LTD&quot;, &quot;Underwater World&quot;, &quot;Walt Smith International&quot;) data$corp_classif&lt;- ifelse(data$corporation %in% corp_fashion, &quot;Fashion/Luxury/Design&quot;, ifelse(data$corporation %in% corp_animalproviders, &quot;Animal/animal prod. providers&quot;, ifelse(data$corporation %in% &quot;Museums&quot;, &quot;Museums&quot;, &quot;Others&quot;))) rm(corp_animalproviders, corp_fashion) # TO FACTOR data$country_imp_exp&lt;- as.factor(data$country_imp_exp) data$country_origin&lt;-as.factor(data$country_origin) data$corporation&lt;-as.factor(data$corporation) data$corp_classif&lt;- as.factor(data$corp_classif) "],
["exploratory-analysis.html", "Chapter 3 Exploratory analysis 3.1 Variables related with the trade process: 3.2 Variables related with the countries 3.3 Variables related with the product 3.4 More data cleaning after exploratory analysis", " Chapter 3 Exploratory analysis Here you can check data fields and fields descriptions for all variables appearing in the dataset Variables related with the trade process: control_number: It represents a unique individual shipment processed by the USFWS. quantity: It represents the numeric quantity of the wildlife produc unit: It represents the unit for the numeric quantity import_export: It represents whether the shipment is an (I)mport or (E)xport action: Action taken by USFWS on import ((C)leared/(R)efused) shipment_date: Full date when shipment arrived shipment_year: Year when the shipment arrived (derived from “shiptment_year”) disposition: Fate of the import disposition_date: Full date when disposition occurred disposition_year: Year when disposition occurred (derived from “disposition_date”) Variables related with the countries: country_origin: It represents the code for the country of origin of the wildlife product country_imp_exp: It represents the code for the country to/from which the wildlife product is shipped port: It represents the port or region of shipment entry us_co: It represents the US party of the shipment foreign_co: It represents the foreign party of the shipment Variables related with the product: description: It represents the type/form of the wildlife product value: It represents the reported value of the wildlife product in US dollars purpose: It represents the reason the wildlife product is being imported source: It represents the type of source within the origin country (e.g., wild, bred) species_code: It represents the USFWS code for the wildlife product taxa: It represents the USFWS-derived broad taxonomic categorization class: It represents the EHA-derived class-level taxonomic designation genus: It represents the Genus (or higher-level taxonomic name) of the wildlife product species: It represents species of the wildlife product subspecies: It represents subspecies of the wildlife product specific_name: It represents a specific common name for the wildlife product generic_name: It represents a general common name for the wildlife product 3.1 Variables related with the trade process: 3.1.1 control_number It represents a unique individual shipment processed by the USFWS. A shipment refers to any container or group of containers that share a common control number, country of shipment and shipment date. Each shipment may be represented in the lemis dataset by multiple segments or rows, because the contents are derived from more than one species or type of product. There are 2,079,637 unique shipments containing 5,451,832 segments. Of those, 60% (1,265,491 unique shipments) represent single segments. It means that for 1,265,491 shipments only one species and one type of product were discovered. The remaining 40% (814,146 unique shipments) contain 4,186,341 segments. These multiple segments shipments contain from 2 to 492 segments. The average number of segments in this kind of shipments is 5; the median is 3. # Dropping unused levels data$control_number &lt;- droplevels(data$control_number) # Unique shipments shipments&lt;- data %&gt;% dplyr::group_by(control_number) %&gt;% dplyr::summarise(size_segments=n()) %&gt;% ungroup() %&gt;% mutate(type_segment = ifelse(size_segments==1, &quot;single&quot;, &quot;multiple&quot;)) %&gt;% mutate(type_segment=as.factor(type_segment)) shipments&lt;- shipments %&gt;% select(size_segments, type_segment) %&gt;% mutate(size_segments=as.factor(size_segments)) %&gt;% dplyr::group_by(size_segments) %&gt;% dplyr::summarise(total_shipments=n()) DT::datatable(shipments, rownames = FALSE, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 1: &#39;, htmltools::em(&#39;Number of unique shipments based on the amount of segments&#39;))) %&gt;% formatRound(&#39;total_shipments&#39;,1) rm(shipments) 3.1.2 quantity and unit Quantity represents the numeric quantity of the wildlife product, while unit represents the unit of measure for the numeric quantity. There are 13 types of units. 94.64% of data is measured with the unit “Number” (the number of individual wildlife items). The shipments include around 11,5 billions of wildlife items plus 1,1 billion kg of wildlife items only measured in weight. units &lt;-data %&gt;% group_by(unit) %&gt;% summarise(total_segments = n(),percentage=n()/nrow(data)) %&gt;% drop_na(unit) %&gt;% arrange(desc(percentage)) DT::datatable(units, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 1: &#39;, htmltools::em(&#39;Units of measure&#39; ))) %&gt;% formatRound(&#39;total_segments&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) data$quantity&lt;- as.numeric(data$quantity) quantity&lt;- data %&gt;% dplyr::group_by(unit) %&gt;% drop_na(quantity) %&gt;% dplyr::summarise(quantity = sum(quantity, na.rm=TRUE)) %&gt;% arrange(desc(quantity)) DT::datatable(quantity, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 1: &#39;, htmltools::em(&#39;Quantity per unit&#39;))) %&gt;% formatRound(&#39;quantity&#39;,1) rm(units, quantity) 3.1.3 import_export It represents Whether the shipment is an (I)mport or (E)xport. In this dataset, 100% of the data is an import. imports &lt;-data %&gt;% group_by(import_export) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% arrange(desc(percentage)) DT::datatable(imports, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 2: &#39;, htmltools::em(&#39;Shipments: Imports and exports&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) imports %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(import_export, desc(percentage)), y=~percentage, color=~import_export) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Shipments: Imports and exports&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Imports and exports&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(imports) 3.1.4 action Action taken by the USFWS on import ((C)leared/(R)efused) 98.28% of imports were legally declared, just 1.73% was refused. We can find cleared and refused segments in the same unique shipment. Most of the refused shipments included items related with mammals (28%) and reptils (27%) Most illegal shipments are exported from Mexico (19%), Canada (9%) and China (8%). The country of origin of the refused shipments is mainly unknown (23%), followed by Mexico (14%), Canada (6%), Indonesia (6% )and China (6%) action &lt;-data %&gt;% group_by(action) %&gt;% summarise(total= n(), percentage=n()/nrow(data)) %&gt;% drop_na(action) %&gt;% arrange(desc(percentage)) DT::datatable(action, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 3: &#39;, htmltools::em(&#39;Action taken by the USFWS on imports&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) action %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(action, desc(percentage)), y=~percentage, color=~action) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Action taken by the USFWS on imports&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Actions&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(action) refused &lt;- data %&gt;% filter(action==&quot;Refused&quot;) # Country of origin refused %&gt;% group_by(country_origin) %&gt;% summarise(total=n(), percentage=n()/nrow(refused)*100) %&gt;% arrange(desc(percentage)) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(country_origin, desc(percentage)), y=~percentage, color=~country_origin) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Country of origin of refused segments (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of origin&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Country of export refused %&gt;% group_by(country_imp_exp) %&gt;% summarise(total=n(), percentage=n()/nrow(refused)*100) %&gt;% arrange(desc(percentage)) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(country_imp_exp, desc(percentage)), y=~percentage, color=~country_imp_exp) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Country of export of refused segments (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of export&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Taxa refused %&gt;% group_by(taxa) %&gt;% summarise(total=n(), percentage=n()/nrow(refused)*100) %&gt;% arrange(desc(percentage)) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(taxa, desc(percentage)), y=~percentage, color=~taxa) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Taxa of refused segments (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Genus refused %&gt;% drop_na(genus) %&gt;% mutate(genus=paste(taxa,&quot;-&quot;, genus)) %&gt;% group_by(genus) %&gt;% summarise(total=n(), percentage=n()/nrow(refused)*100) %&gt;% arrange(desc(percentage)) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(genus, desc(percentage)), y=~percentage, color=~genus) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 37:Genus of refused segments (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Genus&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Port refused %&gt;% group_by(port) %&gt;% summarise(total=n(), percentage=n()/nrow(refused)*100) %&gt;% arrange(desc(percentage)) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(port, desc(percentage)), y=~percentage, color=~port) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Port of refused segments (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Port&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(refused) 3.1.5 disposition It represents the fate of the import There are 5 categories: Cleared, abandoned, reexport, seized and others. Most of them (98.3%) are cleared. disposition &lt;-data %&gt;% group_by(disposition) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(disposition) %&gt;% arrange(desc(percentage)) DT::datatable(disposition, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 4: &#39;, htmltools::em(&#39;Fate of the import&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) disposition %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(disposition, desc(percentage)), y=~percentage, color=~disposition) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Fate of the import&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Dispositions&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(disposition) 3.1.6 shipment_date and disposition_date Shipment_date represents the date when shipment arrived, while disposition_date represents the date when disposition occurred. 54% of dispositions took place within a month of the shipment date (most of them within a week) While ‘shipment_date’ entries fell completely within the time period of 2000–2014, ‘disposition_date’ ranged more widely Users should be wary of any disposition date values that precede the associated shipment date, as we are unaware of how this could represent an accurate accounting of the product disposition process. However, for many potential analyses, differences in the date fields may not be a significant cause for concern because ‘shipment_date’ alone provides a sound index for those interested in temporal trends in wildlife trade days&lt;- data %&gt;% mutate(days = as.factor(as.numeric(disposition_date - shipment_date))) %&gt;% group_by(days) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% filter(days %in% c(&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;, &quot;16&quot;, &quot;17&quot;, &quot;18&quot;, &quot;19&quot;, &quot;20&quot;, &quot;21&quot;, &quot;22&quot;, &quot;23&quot;, &quot;24&quot;, &quot;25&quot;, &quot;26&quot;, &quot;27&quot;, &quot;28&quot;, &quot;29&quot;, &quot;30&quot;)) DT::datatable(days, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 5: &#39;, htmltools::em(&#39;Number of dispositions within a month of the shipment date&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) days %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(days, percentage), y=~percentage) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Percentage of dispositions within a month of the shipment date&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Days&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(days) 3.2 Variables related with the countries 3.2.1 country_origin It represents the code for the country of origin of the wildlife product. Shipments comes from 252 different countries of origin, although 75% of all the segments comes from the same 15 countries.The top-five countries of origin were Indonesia (15%), Canada (10%), South Africa (9%), Philippines (8%) and China (7%). Together, they represent around 50% of all segments. # Dropping unused levels data$country_origin &lt;- droplevels(data$country_origin) country_origin &lt;-data %&gt;% group_by(country_origin) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(country_origin) %&gt;% arrange(desc(percentage)) DT::datatable(country_origin, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 6: &#39;, htmltools::em(&#39;Country of origin of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) country_origin %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(country_origin, desc(percentage)), y=~percentage, color=~country_origin) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 10: Country of origin of the wildlife product (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of origin&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Country of origin by quantity # We&#39;ll only include in the analysis those items measured in &quot;number&quot; and &quot;kg&quot; units, because they represent 99.45% of the data. data %&gt;% filter(unit==&quot;Number&quot;) %&gt;% group_by(country_origin, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(country_origin, desc(total)), y=~total, color=~country_origin) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 12: Most common country of origin (by number) (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of origin&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) data %&gt;% filter(unit==&quot;Kilograms&quot;) %&gt;% group_by(country_origin, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(country_origin, desc(total)), y=~total, color=~country_origin) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 13: Most common country of origin (by Kilograms) (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of origin&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) country_origin_top5&lt;- data %&gt;% filter(country_origin %in% c(&quot;Indonesia&quot;, &quot;Canada&quot;, &quot;South Africa&quot;, &quot;Philippines&quot;, &quot;China&quot;)) %&gt;% group_by(country_origin, taxa) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(country_origin, desc(percentage)) %&gt;% top_n(3, percentage) country_origin_top5&lt;- droplevels(country_origin_top5) plot_ly(country_origin_top5, x=~country_origin, y=~percentage, group= ~taxa, type=&quot;bar&quot;, color=~taxa) %&gt;% layout(title = &quot;&lt;b&gt;Figure 11: Common taxa by country of origin&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of origin&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) rm(country_origin_top5) 3.2.2 country_imp_exp It represents the code for the country to/from which the wildlife product is shipped. Shipments were exported to the UUEE from 257 different countries, although the top 15 represent 75% of all segments. The top-five countries of export were Canada (12%), Indonesia (12%), South Africa (8%), Philippines (8%) and Italy (7%). # Dropping unused levels data$country_imp_exp &lt;- droplevels(data$country_imp_exp) country_imp_exp &lt;-data %&gt;% group_by(country_imp_exp) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(country_imp_exp) %&gt;% arrange(desc(percentage)) DT::datatable(country_imp_exp, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 7: &#39;, htmltools::em(&#39;Country to/from which the wildlife product is shipped&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) country_imp_exp %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(country_imp_exp, desc(percentage)), y=~percentage, color=~country_imp_exp) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 14: Country that exported the wildlife product to the EEUU (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;country_imp_exp&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Country of export by quantity # We&#39;ll only include in the analysis those items measured in &quot;number&quot; and &quot;kg&quot; units, because they represent 99.45% of the data. data %&gt;% filter(unit==&quot;Number&quot;) %&gt;% group_by(country_imp_exp, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(country_imp_exp, desc(total)), y=~total, color=~country_imp_exp) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 16: Most common country of export (by number) (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of export&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) data %&gt;% filter(unit==&quot;Kilograms&quot;) %&gt;% group_by(country_imp_exp, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(country_imp_exp, desc(total)), y=~total, color=~country_imp_exp) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 17: Most common country of export (by Kilograms) (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of export&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) country_export_top5&lt;- data %&gt;% filter(country_imp_exp %in% c(&quot;Canada&quot;, &quot;Indonesia&quot;, &quot;South Africa&quot;, &quot;Philippines&quot;, &quot;Italy&quot;)) %&gt;% group_by(country_imp_exp, taxa) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(country_imp_exp, desc(percentage)) %&gt;% top_n(3, percentage) country_export_top5&lt;- droplevels(country_export_top5) plot_ly(country_export_top5, x=~country_imp_exp, y=~percentage, group= ~taxa, type=&quot;bar&quot;, color=~taxa) %&gt;% layout(title = &quot;&lt;b&gt;Figure 15: Common taxa by country of export&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of export&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) rm(country_export_top5) Most active countries are on both sides (country of origin &amp; country of export) country_origin &lt;- country_origin %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(4, percentage) %&gt;% rename(country = country_origin) country_imp_exp &lt;- country_imp_exp %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(4, percentage) %&gt;% rename(country = country_imp_exp) countries&lt;- combine(country_origin, country_imp_exp) countries %&gt;% plot_ly(x=~reorder(country, desc(percentage)), y=~percentage, color=~source) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Most active countries&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(country_origin) rm(country_imp_exp) rm(countries) 3.2.3 port It represents the port of entry Although there are around 328 ports of entry into the EEUU, only 73 of them are represented in this dataset. This is because not all of them are covered by FWS wildlife inspectors. By law, only 18 of them are designated ports with full-time inspectors. Based on the number of segments, the top-five ports of entry were Los Angeles (20%), New York(19%), Miami(6%), Newark(5%) and San Francisco(5%). Together, they represent 56% of all segments. The top 15 represent 84% of all segments. It’s interesting to point out that the top-five ports of entry are all designated ports. # Dropping unused levels data$port &lt;- droplevels(data$port) port &lt;-data %&gt;% group_by(port) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(port) %&gt;% arrange(desc(percentage)) DT::datatable(port, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 8: &#39;, htmltools::em(&#39;Port or region of shipment entry&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) port %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(port, desc(percentage)), y=~percentage, color=~port) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 18: Port of entry (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Port&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(port) # Ports by quantity # We&#39;ll only include in the analysis those items measured in &quot;number&quot; and &quot;kg&quot; units, because they represent 99.45% of the data. data %&gt;% filter(unit==&quot;Number&quot;) %&gt;% group_by(port, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(port, desc(total)), y=~total, color=~port) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 20: Most common ports (by number) (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Port&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) data %&gt;% filter(unit==&quot;Kilograms&quot;) %&gt;% group_by(port, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(port, desc(total)), y=~total, color=~port) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 21: Most common ports (by Kilograms) (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Port&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) ports_top5&lt;- data %&gt;% filter(port %in% c(&quot;Los Angeles, CA&quot;, &quot;New York, NY&quot;, &quot;Miami, FL&quot;, &quot;Newark, NJ&quot;, &quot;San Francisco, CA&quot;)) %&gt;% group_by(port, taxa) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(port, desc(percentage)) %&gt;% top_n(3, percentage) ports_top5&lt;- droplevels(ports_top5) plot_ly(ports_top5, x=~port, y=~percentage, group= ~taxa, type=&quot;bar&quot;, color=~taxa) %&gt;% layout(title = &quot;&lt;b&gt;Figure 19: Common taxa by port&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Port&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) rm(ports_top5) 3.2.4 Trade routes trade_routes &lt;-data %&gt;% group_by(country_imp_exp, port) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(port, country_imp_exp) %&gt;% arrange(desc(percentage)) DT::datatable(trade_routes, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 8: &#39;, htmltools::em(&#39;Trade routes&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) rm(trade_routes, port) routes_top5&lt;- data %&gt;% mutate(route = paste(country_imp_exp,&quot;-&quot;, port)) %&gt;% filter(route %in% c(&quot;Indonesia - Los Angeles, CA&quot;, &quot;Italy - New York, NY&quot;, &quot;South Africa - New York, NY&quot;, &quot;Hong Kong SAR China - New York, NY&quot;, &quot;Philippines - Los Angeles, CA&quot;)) %&gt;% group_by(route, taxa) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(route, desc(percentage)) %&gt;% top_n(3, percentage) routes_top5&lt;- droplevels(routes_top5) plot_ly(routes_top5, x=~route, y=~percentage, group= ~taxa, type=&quot;bar&quot;, color=~taxa) %&gt;% layout(title = &quot;&lt;b&gt;Figure 22: Common taxa by route&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Route&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) rm(routes_top5) 3.2.5 us_co It represents the US party of the shipment We have excluded the “EXEMPTIONS 6 AND 7(C)” from the analysis. There are 126,052 US parties The top 15 just represents 10.3% of data The top 50 just represents 19 % of data us_co &lt;-data %&gt;% filter(!us_co == &quot;EXEMPTIONS 6 AND 7(C)&quot;) %&gt;% group_by(us_co) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(us_co) %&gt;% arrange(desc(percentage)) DT::datatable(us_co, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 9: &#39;, htmltools::em(&#39;US party of the shipment&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) us_co %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(us_co, desc(percentage)), y=~percentage, color=~us_co) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;US party of the shipment (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;US party&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(us_co) We want to analyze which American corporations are importing the most. So, we have grouped the mayor corporations based on the company names. We’ve grouped most of those companies that represent at least 19% of the data, covering approximately 1.000.000 observations. # Let&#39;s summarize and graph these corporations data_corporations&lt;- data %&gt;% filter(corp_classif!=&quot;Others&quot;) %&gt;% group_by(corp_classif, corporation) %&gt;% dplyr::summarise(total=n(), percentage=n()/nrow(data)) %&gt;% arrange(desc(total)) DT::datatable(data_corporations, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 10: &#39;, htmltools::em(&#39;Which American corporations are importing the most&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) ## Graph by classification data_corporations %&gt;% mutate(percentage=percentage*100) %&gt;% filter(corp_classif == &quot;Fashion/Luxury/Design&quot;) %&gt;% plot_ly(x=~reorder(corporation, desc(percentage)), y=~percentage, marker = list(color = &quot;coral&quot;)) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 23: Fashion/Luxury/Design Corporations&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;American corporation&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) data_corporations %&gt;% mutate(percentage=percentage*100) %&gt;% filter(corp_classif == &quot;Animal/animal prod. providers&quot;) %&gt;% plot_ly(x=~reorder(corporation, desc(percentage)), y=~percentage, marker = list(color = &quot;green&quot;)) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 24: Animal/animal prod. providers Corporations&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;American corporation&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) data_corporations %&gt;% group_by(corp_classif) %&gt;% dplyr::summarise(total=sum(total), percentage=sum(percentage)) %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(corp_classif, desc(percentage)), y=~percentage, color=~corp_classif) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;American corporation classification &lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;American corporation&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(data_corporations) 3.2.6 foreign_co It represents the foreign party of the shipment There are 237,994 foreign parties The top 15 just represents 5.4% of data The top 50 just represents 12.4% of data foreign_co &lt;-data %&gt;% filter(!foreign_co == &quot;EXEMPTIONS 6 AND 7(C)&quot;) %&gt;% group_by(foreign_co) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(foreign_co) %&gt;% arrange(desc(percentage)) DT::datatable(foreign_co, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 11: &#39;, htmltools::em(&#39;Foreign party of the shipment&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) foreign_co %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(foreign_co, desc(percentage)), y=~percentage, color=~foreign_co) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Foreign party of the shipment (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Foreign party of the shipment&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(foreign_co) 3.3 Variables related with the product 3.3.1 description It represents the type/form of the wildlife product. The FWS Import/Export Key recognizes 94 different descriptions for wildlife items, although only 87 of them were used in this dataset. Based on the types of items by segment, most of them contain “Live specimens” (29%), followed by trophies (17%), “shell products” (9%), small leather products (7%) and jewelry (6%). Together, the top-five descriptions represent 68% of all segments. Most of the “live specimens” are corals (38%) and fishes (23%) Most of the “trophies” are made from mammals (89%) Most of the “shell products” are derived from shells (98%) Most of the “small leather products” are derived from reptiles (81%) Most of the “jewelry” is derived from shells (93%) If we take into account the quantity of items in trade (instead of the type of segment): Based on the number of items, jewelry, shells, feathers, hair products and eggs (dead or blown) are the most common products. And based on the kg of items, meat, dead animals, frog legs, live specimens and shells are the most common products. # Dropping unused levels data$description &lt;- droplevels(data$description) description &lt;-data %&gt;% group_by(description) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(description) %&gt;% arrange(desc(percentage)) DT::datatable(description, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 12: &#39;, htmltools::em(&#39;Type/form of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) description %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(description, desc(percentage)), y=~percentage, color=~description) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 1: Common types of items by segment (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(description) # Descriptions by quantity # We&#39;ll only include in the analysis those items measured in &quot;number&quot; and &quot;kg&quot; units, because they represent 99.45% of the data. data %&gt;% filter(unit==&quot;Number&quot;) %&gt;% group_by(description, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(description, desc(total)), y=~total, color=~description) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 3: Most common type of items (by number) (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) data %&gt;% filter(unit==&quot;Kilograms&quot;) %&gt;% group_by(description, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(description, desc(total)), y=~total, color=~description) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 4: Most common type of items (by Kilograms) (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) descriptions_top5&lt;- data %&gt;% filter(description %in% c(&quot;Live specimen&quot;, &quot;Trophy&quot;, &quot;Shell product&quot;, &quot;Leather product (small)&quot;, &quot;Jewelry&quot;)) %&gt;% group_by(description, taxa) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(description, desc(percentage)) %&gt;% top_n(3, percentage) descriptions_top5&lt;- droplevels(descriptions_top5) plot_ly(descriptions_top5, x=~description, y=~percentage, group= ~taxa, type=&quot;bar&quot;, color=~taxa) %&gt;% layout(title = &quot;&lt;b&gt;Figure 2: Common taxa by description&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) rm(descriptions_top5) 3.3.2 value It represents the reported value of every shipment in US dollars. - Lower values are more common than higher values - The min value is 0 dollars while the max value is 118,000,000 dollars - The halway point, the median, is 187$ - 50% of shipments are between 30 dollars (1st quartile) and 1260 dollars (3rd quartile) summary(data$value) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0 30 187 4805 1260 118000000 1868566 # Data between the minimum value and the 3rd quartile data %&gt;% filter(value&gt;=0 &amp; value&lt;=1260) %&gt;% plot_ly(x=~value, type=&#39;histogram&#39;, nbinsx = 40) %&gt;% layout(title = &quot;&lt;b&gt;Number of shipments with a value between 0 and 1260 US dollars.&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Value&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Count&lt;/b&gt;&quot;)) 3.3.3 purpose It represents the declared reason the wildlife product is being imported. It’s declared by the importer. The FWS Import/Export Key recognizes 12 different purposes of import and all of them were used in this dataset. Based on the types of items by segment, most of them were imported for “Commercial” (75%) and “hunting trophies” (18%) purposes. Together, both purposes represent 92% of all segments # Dropping unused levels data$purpose &lt;- droplevels(data$purpose) purpose &lt;-data %&gt;% group_by(purpose) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(purpose) %&gt;% arrange(desc(percentage)) DT::datatable(purpose, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 13: &#39;, htmltools::em(&#39;Reasons the wildlife products are being imported&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) purpose %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(purpose, desc(percentage)), y=~percentage, color=~purpose) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 5: Reasons the wildlife products are being imported&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Purposes&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(purpose) # Purpose by quantity # We&#39;ll only include in the analysis those items measured in &quot;number&quot; and &quot;kg&quot; units, because they represent 99.45% of the data. data %&gt;% filter(unit==&quot;Number&quot;) %&gt;% group_by(purpose, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(purpose, desc(total)), y=~total, color=~purpose) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 7: Most common type of purpose (by number) &lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Purpose &lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) data %&gt;% filter(unit==&quot;Kilograms&quot;) %&gt;% group_by(purpose, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(purpose, desc(total)), y=~total, color=~purpose) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 8: Most common type of purpose (by Kilograms)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt; Purpose&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) purpose_taxa&lt;- data %&gt;% filter(purpose %in% c(&quot;Commercial&quot;, &quot;Hunting trophies&quot;, &quot;Personal&quot;, &quot;Scientific&quot;, &quot;Educational&quot;)) %&gt;% group_by(purpose, taxa) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(purpose, desc(percentage)) %&gt;% top_n(3, percentage) purpose_taxa&lt;- droplevels(purpose_taxa) plot_ly(purpose_taxa, x=~purpose, y=~percentage, group= ~taxa, type=&quot;bar&quot;, color=~taxa) %&gt;% layout(title = &quot;&lt;b&gt;Figure 6: Common taxa by purpose&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Purpose&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) rm(purpose_taxa) 3.3.4 source It represents the type of source within the origin country (e.g., wild, bred). The FWS Import/Export Key recognizes 10 different sources for wildlife items, although only 8 of them were used in this dataset. Based on the source of the items by segment, the most common sources in the segments are “specimens taken from the wild” (78%) and “animals bred in captivity” (15%). Together, both represent around 93% of all segments (Figure 10).. # Dropping unused levels data$source &lt;- droplevels(data$source) source &lt;-data %&gt;% group_by(source) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(source) %&gt;% arrange(desc(percentage)) DT::datatable(source, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 14: &#39;, htmltools::em(&#39;Types of source within the origin country&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) source %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(source, desc(percentage)), y=~percentage, color=~source) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 9: Types of source within the origin country&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Sources&lt;/b&gt;&quot; ,tickangle=-65, tickfont = list(size = 10)), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(source) 3.3.5 species_code It represents the USFWS code for the wildlife product There are 15, 322 unique species codes The top 15 represents 30 % of data The top 50 represents 50.4% of data # Dropping unused levels data$species_code &lt;- droplevels(data$species_code) species_code &lt;-data %&gt;% group_by(species_code) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(species_code) %&gt;% arrange(desc(percentage)) DT::datatable(species_code, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 15: &#39;, htmltools::em(&#39;USFWS code for the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) species_code %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(species_code, desc(percentage)), y=~percentage, color=~species_code) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;USFWS code for the wildlife product (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;USFWS code&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(species_code) 3.3.6 taxa It represents the USFWS-derived broad taxonomic categorization There are 13 taxa levels There is a ‘taxa’ field for the vast majority (&gt;99%) of records Most of them are mammals (29.16%), followed by shells (20.34%), reptiles (13.29%) and corals (12.63%). These four categories represent 75,42% of data # Dropping unused levels data$taxa &lt;- droplevels(data$taxa) taxa &lt;-data %&gt;% group_by(taxa) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(taxa) %&gt;% arrange(desc(percentage)) DT::datatable(taxa, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 16: &#39;, htmltools::em(&#39;USFWS-derived broad taxonomic categorization&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) taxa %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(taxa, desc(percentage)), y=~percentage, color=~taxa) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 25: USFWS-derived broad taxonomic categorization&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(taxa) # Taxa by quantity # We&#39;ll only include in the analysis those items measured in &quot;number&quot; and &quot;kg&quot; units, because they represent 99.45% of the data. data %&gt;% filter(unit==&quot;Number&quot;) %&gt;% group_by(taxa, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% plot_ly(x=~reorder(taxa, desc(total)), y=~total, color=~taxa) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 26: Most common type of taxa (by number) &lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa &lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) data %&gt;% filter(unit==&quot;Kilograms&quot;) %&gt;% group_by(taxa, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% plot_ly(x=~reorder(taxa, desc(total)), y=~total, color=~taxa) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 27: Most common type of taxa (by Kilograms)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt; Taxa &lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) 3.3.7 class It represents the EHA-derived class-level taxonomic designation - There are 53 classes - The top 15 represents 93% of data # Dropping unused levels data$class &lt;- droplevels(data$class) class &lt;-data %&gt;% group_by(class) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(class) %&gt;% arrange(desc(percentage)) DT::datatable(class, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 17: &#39;, htmltools::em(&#39; EHA-derived class-level taxonomic designation&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) class %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(class, desc(percentage)), y=~percentage, color=~class) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;EHA-derived class-level taxonomic designation (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Class&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(class) 3.3.8 genus It represents the Genus (or higher-level taxonomic name) of the wildlife product There are 6,335 genus levels The top 15 represents 33.4 of data The top 50 represents 57.3% of data # Dropping unused levels data$genus &lt;- droplevels(data$genus) genus &lt;-data %&gt;% group_by(genus) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(genus) %&gt;% arrange(desc(percentage)) DT::datatable(genus, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 18: &#39;, htmltools::em(&#39;Genus (or higher-level taxonomic name) of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) genus %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(genus, desc(percentage)), y=~percentage, color=~genus) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 28: Genus (or higher-level taxonomic name) of the wildlife product (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Genus&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(genus) genus_species&lt;- data %&gt;% filter(genus %in% c(&quot;Pinctada&quot;, &quot;Alligator&quot;, &quot;Ursus&quot;, &quot;Python&quot;, &quot;Mustela&quot;)) %&gt;% group_by(genus, species) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(genus, desc(percentage)) %&gt;% top_n(3, percentage) genus_species&lt;- droplevels(genus_species) plot_ly(genus_species, x=~genus, y=~percentage, group= ~species, type=&quot;bar&quot;, color=~species) %&gt;% layout(title = &quot;&lt;b&gt;Figure 29: Common species by genus&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Genus&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) genus_description&lt;- data %&gt;% filter(genus %in% c(&quot;Pinctada&quot;, &quot;Alligator&quot;, &quot;Ursus&quot;, &quot;Python&quot;, &quot;Mustela&quot;)) %&gt;% group_by(genus, description) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(genus, desc(percentage)) %&gt;% top_n(3, percentage) rm(genus_species,genus_description) # Genus by quantity # We&#39;ll only include in the analysis those items measured in &quot;number&quot; and &quot;kg&quot; units, because they represent 99.45% of the data. data %&gt;% filter(unit==&quot;Number&quot;) %&gt;% group_by(genus, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(genus, desc(total)), y=~total, color=~genus) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 30: Most common type of genus (by number) &lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt; Genus &lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) data %&gt;% filter(unit==&quot;Kilograms&quot;) %&gt;% group_by(genus, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(genus, desc(total)), y=~total, color=~genus) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 31: Most common type of genus (by Kilograms)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt; Genus &lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) 3.3.9 species It represents species of the wildlife product. To get a more ilustrative name, we’ll combine genus and species. After removing generics, there are 8,082 different species The top 15 represents 23.8 % of data The top 50 represents 38.3 % of data # Dropping unused levels data$species &lt;- droplevels(data$species) # Removing generics species&lt;- data %&gt;% filter(!species %in% c(&quot;maxima&quot;, &quot;sp.&quot;, &quot;in trop fish &amp;&quot;, &quot;(marine sp.)&quot;, &quot;(freshwater sp.)&quot;, &quot;(including goldfish)&quot;)) %&gt;% drop_na(species) # Combine genus + species species &lt;- species %&gt;% mutate(species = as.factor(paste(genus, &quot;-&quot;,species))) species &lt;-species %&gt;% group_by(species) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(species) %&gt;% arrange(desc(percentage)) DT::datatable(species, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 19: &#39;, htmltools::em(&#39;Species of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) species %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(species, desc(percentage)), y=~percentage, color=~species) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 32: Species of the wildlife product (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Species&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Combine genus + species in the dataset data &lt;- data %&gt;% mutate(species = as.factor(paste(genus, &quot;-&quot;,species))) rm(species) species_description&lt;- data %&gt;% filter(species %in% c(&quot;Alligator - mississippiensis&quot;, &quot;Ursus - americanus&quot;, &quot;Mustela - vison&quot;, &quot;Struthio - camelus&quot;, &quot;Pinctada - margaritifera&quot;)) %&gt;% group_by(species, description) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(species, desc(percentage)) %&gt;% top_n(3, percentage) species_description&lt;- droplevels(species_description) plot_ly(species_description, x=~species, y=~percentage, group= ~description, type=&quot;bar&quot;, color=~description) %&gt;% layout(title = &quot;&lt;b&gt;Figure 33: Common descriptions by species&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Species&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) species_source&lt;- data %&gt;% filter(species %in% c(&quot;Alligator - mississippiensis&quot;, &quot;Ursus - americanus&quot;, &quot;Mustela - vison&quot;, &quot;Struthio - camelus&quot;, &quot;Pinctada - margaritifera&quot;)) %&gt;% group_by(species, source) %&gt;% dplyr::summarise(n=n()) %&gt;% mutate(percentage = n/sum(n)*100) %&gt;% arrange(species, desc(percentage)) %&gt;% top_n(3, percentage) species_source&lt;- droplevels(species_source) plot_ly(species_source, x=~species, y=~percentage, group= ~source, type=&quot;bar&quot;, color=~source) %&gt;% layout(title = &quot;&lt;b&gt;Figure 34: Common sources by species&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Species&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) rm(species_description,species_source) # Species by quantity # We&#39;ll only include in the analysis those items measured in &quot;number&quot; and &quot;kg&quot; units, because they represent 99.45% of the data. data %&gt;% filter(!grepl(&#39;maxima|sp.|in trop fish &amp;|(marine sp.)| (freshwater sp.)|(including goldfish)|NA - NA&#39;, species)) %&gt;% filter(unit==&quot;Number&quot;) %&gt;% group_by(species, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(species, desc(total)), y=~total, color=~species) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 35: Most common type of species (by number) &lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt; Species &lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) data %&gt;% filter(!grepl(&#39;maxima|sp.|in trop fish &amp;|(marine sp.)| (freshwater sp.)|(including goldfish)|NA - NA&#39;, species)) %&gt;% filter(unit==&quot;Kilograms&quot;) %&gt;% group_by(species, unit) %&gt;% summarise(total = sum(quantity)) %&gt;% arrange(desc(total)) %&gt;% ungroup() %&gt;% top_n(15, total) %&gt;% plot_ly(x=~reorder(species, desc(total)), y=~total, color=~species) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 36: Most common type of species (by Kilograms)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt; Species &lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Total&lt;/b&gt;&quot;)) 3.3.10 subspecies It represents subspecies of the wildlife product There are 439 subspecies levels The top 15 just represents 2.5% of data The top 50 just represents 2.6% of data # Dropping unused levels data$subspecies &lt;- droplevels(data$subspecies) subspecies &lt;-data %&gt;% group_by(subspecies) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% filter(subspecies!=&quot;other shipments&quot;) %&gt;% drop_na(subspecies) %&gt;% arrange(desc(percentage)) DT::datatable(subspecies, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 20: &#39;, htmltools::em(&#39;Subespecies of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) subspecies %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(subspecies, desc(percentage)), y=~percentage, color=~subspecies) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Subespecies of the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Subespecies&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(subspecies) 3.3.11 generic_name It represents a general common name for the wildlife product There are 1,987 generic names levels The top 15 represents 49.3% of data The top 50 represents 71.6% of data # Dropping unused levels data$generic_name &lt;- droplevels(data$generic_name) generic_name &lt;-data %&gt;% group_by(generic_name) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(generic_name) %&gt;% arrange(desc(percentage)) DT::datatable(generic_name, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 21: &#39;, htmltools::em(&#39;General common names for the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) generic_name %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(generic_name, desc(percentage)), y=~percentage, color=~generic_name) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;General common names for the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Generic Name&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(generic_name) 3.3.12 specific_name It represents a specific common name for the wildlife product. For getting a more ilustrative name, we’ll combine generic_name and specific_name After removing empty values, there are 10,435 combinations of generic_name and specific_name The top 15 represents 25.3% of data The top 50 represents 41.3.6% of data # Dropping unused levels data$specific_name &lt;- droplevels(data$specific_name) # Removing generics specific_name&lt;- data %&gt;% drop_na(specific_name) # Combine genus + species specific_name &lt;- specific_name %&gt;% mutate(specific_name = paste(generic_name, &quot;-&quot;,specific_name)) specific_name &lt;-specific_name %&gt;% group_by(specific_name) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(specific_name) %&gt;% arrange(desc(percentage)) DT::datatable(specific_name, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 22: &#39;, htmltools::em(&#39;Specific common names for the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) specific_name %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(specific_name, desc(percentage)), y=~percentage, color=~specific_name) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Specific common names for the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Specific Name&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Combine generic_name and specific_name in the dataset data &lt;- data %&gt;% mutate(specific_name = paste(generic_name, &quot;-&quot;,specific_name)) rm(specific_name) 3.4 More data cleaning after exploratory analysis Let’s exclude from the analysis those descriptions with less than 10 instances. We reduce the number of descriptions from 88 to 78 # data&lt;-data %&gt;% # group_by(description) %&gt;% # filter(n()&gt;=10) # 5,451,832 &lt;- 5,451,800 rows # # # Dropping unused levels # data$description &lt;- droplevels(data$description) Let’s exclude from the analysis those species with less than 10 instances. We reduce the number of species from 8,088 to 6,426 # data&lt;-data %&gt;% # group_by(species) %&gt;% # filter(n()&gt;=10) # 5,451,800 &lt;- 5,421,893 rows # # # Dropping unused levels # data$species &lt;- droplevels(data$species) "],
["trends-over-time.html", "Chapter 4 Trends over time 4.1 Number of shipments 4.2 Import (US dollars) 4.3 Content (number of items and kg) 4.4 Refused shipments", " Chapter 4 Trends over time The trends analysis will focus on the number of shipments, the import (US dollars), the contents and the capacity of deter ilegal shipments (refused shipments). 4.1 Number of shipments In the 15 years analyzed, there are 2,079,637 unique shipments containing 5,451,832 segments. We can see a clear upward trend in the number of cases from 2000 to 2006. Then, the curve reached its peak with around 162,000 unique shipments, decreased a bit, and started leveling off. unique_shipments_yearmonth &lt;-data %&gt;% group_by(year= year(shipment_date),month = month(shipment_date)) %&gt;% summarise(unique_shipments = n_distinct(control_number)) %&gt;% ungroup() %&gt;% mutate(year=as.factor(year)) unique_shipments_yearmonth$date &lt;- as.yearmon(paste(unique_shipments_yearmonth$year, unique_shipments_yearmonth$month), &quot;%Y %m&quot;) unique_shipments_year &lt;- unique_shipments_yearmonth %&gt;% ungroup() %&gt;% group_by(year) %&gt;% summarise(unique_shipments = sum(unique_shipments)) # Plotly by year unique_shipments_year %&gt;% plot_ly(x=~year, y=~unique_shipments,type = &#39;scatter&#39;, mode = &#39;lines&#39;) %&gt;% layout(title = &quot;&lt;b&gt;Figure 38: Unique shipments per year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Year&lt;/b&gt;&quot;), yaxis = list(title = &quot;&lt;b&gt;Total of unique shipments&lt;/b&gt;&quot;)) # Plotly by year and month plot_ly(unique_shipments_yearmonth,x = ~month, y = ~unique_shipments) %&gt;% add_lines(color=~year, colors=&quot;Dark2&quot;) %&gt;% layout(title = &quot;&lt;b&gt;Figure 39: Number of unique shipments depending on the month of the year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Month&lt;/b&gt;&quot;), yaxis = list(title = &quot;&lt;b&gt;Unique shipments&lt;/b&gt;&quot;)) Let’s see the pattern depending on the week of the year We have excluded from the figure the 1st, 52nd and 53rd week of the year. unique_shipments_week &lt;-data %&gt;% group_by(year= year(shipment_date), week=week(shipment_date)) %&gt;% summarise(unique_shipments = n_distinct(control_number)) %&gt;% ungroup() %&gt;% filter(!week %in% c(1, 52, 53)) %&gt;% mutate(year=as.factor(year)) plot_ly(unique_shipments_week,x = ~week, y = ~unique_shipments) %&gt;% add_lines(color=~year, colors=&quot;Dark2&quot;) %&gt;% layout(title = &quot;&lt;b&gt;Number of unique shipments depending on the week of the year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Week&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Unique shipments&lt;/b&gt;&quot;)) rm(unique_shipments_year,unique_shipments_yearmonth,unique_shipments_week) 4.2 Import (US dollars) It’s important to take into account that since year 2008, this variable has a lot of missing values (check the 2.1. section) So, we can just calculate the total import for the period between 2000-2007, and also for the year 2012. It seems there has been an upward trend in the amount of spent US dollars from 2000 to 2012. 4.2.1 Measured by disposition year value_wildlifeproduct_dispyear &lt;-data %&gt;% dplyr::filter(!is.na(value)) %&gt;% dplyr::filter(!disposition_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) %&gt;% group_by(disposition_year) %&gt;% summarise(value = sum(as.numeric(value))) value_wildlifeproduct_dispyear$disposition_year &lt;- droplevels(value_wildlifeproduct_dispyear$disposition_year) DT::datatable(value_wildlifeproduct_dispyear, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 23: &#39;, htmltools::em(&#39;Import (US dollars) by disposition year&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;) value_wildlifeproduct_dispyear %&gt;% plot_ly(x=~disposition_year, y=~value, color=~disposition_year) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by disposition year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Disposition Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) rm(value_wildlifeproduct_dispyear) 4.2.2 Measured by shipment year value_wildlifeproduct_shipyear &lt;-data %&gt;% filter(!is.na(value)) %&gt;% filter(!is.na(shipment_year)) %&gt;% filter(!shipment_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) %&gt;% group_by(shipment_year) %&gt;% summarise(value = sum(as.numeric(value))) value_wildlifeproduct_shipyear$shipment_year &lt;- droplevels(value_wildlifeproduct_shipyear$shipment_year) DT::datatable(value_wildlifeproduct_shipyear, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 24: &#39;, htmltools::em(&#39;Import (US dollars) by shipment year&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;) value_wildlifeproduct_shipyear %&gt;% plot_ly(x=~shipment_year, y=~value, color=~shipment_year) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 40: Import (US dollars) by shipment year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) rm(value_wildlifeproduct_shipyear) 4.2.3 By taxa and shipment year Items that involved mammals, shells and reptiles generate the highest amount of money throughout the years value_bytaxayear&lt;- data %&gt;% group_by(taxa, shipment_year) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% dplyr::ungroup() %&gt;% filter(!shipment_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) DT::datatable(value_bytaxayear, filter = &#39;top&#39;, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 25: &#39;, htmltools::em(&#39;Import (US dollars) by shipment year &amp; taxa&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) Here you have a dynamic graph, where you can choose the specific taxa elements you want to display value_bytaxayear$shipment_year&lt;- as.numeric(as.character(value_bytaxayear$shipment_year)) value_bytaxayear &lt;- highlight_key(value_bytaxayear) widgets &lt;- bscols( widths = c(12, 12, 12), filter_select(&quot;taxa&quot;,&quot;taxa&quot;, value_bytaxayear, ~taxa), filter_slider(&quot;Shipment Year&quot;, &quot;Years&quot;, value_bytaxayear, ~shipment_year) ) bscols( widths = c(3, 9), widgets, plot_ly(value_bytaxayear, x = ~shipment_year, y = ~value) %&gt;% add_lines(color = ~taxa, colors = &quot;Dark2&quot;) %&gt;% layout(title = &quot;&lt;b&gt;Figure 42: Import (US dollars) by shipment year &amp; taxa&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ) taxa Years rm(widgets,value_bytaxayear) 4.2.4 By description and shipment year value_bydescriptionyear&lt;- data %&gt;% mutate(description = recode(description, &quot;Specimen (scientific or museum)&quot;=&quot;Specimen(scient/museum)&quot;)) %&gt;% group_by(description) %&gt;% filter(n()&gt;=10) %&gt;% ungroup() %&gt;% group_by(description, shipment_year) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% dplyr::ungroup() %&gt;% filter(!shipment_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) DT::datatable(value_bydescriptionyear, filter = &#39;top&#39;, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 26: &#39;, htmltools::em(&#39;Import (US dollars) by shipment year &amp; description&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) Here you have a dynamic graph, where you can choose the specific descriptions you want to display value_bydescriptionyear$shipment_year&lt;- as.numeric(as.character(value_bydescriptionyear$shipment_year)) value_bydescriptionyear &lt;- value_bydescriptionyear %&gt;% filter(description %in% c(&quot;Shell product&quot;, &quot;Skin&quot;, &quot;Garment&quot;, &quot;Ivory carving&quot;, &quot;Leather product (small)&quot;, &quot;Live specimen&quot;, &quot;Shoe&quot;, &quot;Meat&quot;, &quot;Dead animal&quot;, &quot;Jewelry&quot;, &quot;Trim&quot;, &quot;Leather product (large)&quot;, &quot;Ivory piece&quot;, &quot;Specimen(scient/museum)&quot;, &quot;Shell&quot;)) value_bydescriptionyear &lt;- highlight_key(value_bydescriptionyear) widgets &lt;- bscols( widths = c(12, 12, 12), filter_select(&quot;description&quot;,&quot;description&quot;, value_bydescriptionyear, ~description), filter_slider(&quot;Shipment Year&quot;, &quot;Years&quot;, value_bydescriptionyear, ~shipment_year) ) bscols( widths = c(3, 9), widgets, plot_ly(value_bydescriptionyear, x = ~shipment_year, y = ~value) %&gt;% add_lines(color = ~description, colors = &quot;Dark2&quot;) %&gt;% layout(title = &quot;&lt;b&gt;Figure 43: Import by year &amp; description (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ) description Years rm(widgets, value_bydescriptionyear) 4.2.5 By name (generic + specific) and shipment year value_byname&lt;- data %&gt;% group_by(specific_name, shipment_year) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% dplyr::ungroup() %&gt;% filter(!shipment_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) DT::datatable(value_byname, filter = &#39;top&#39;, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 27: &#39;, htmltools::em(&#39;Import (US dollars) by shipment year &amp; specific name&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) Here you have a dynamic graph, where you can choose the specific names you want to display. We have selected the top 100 based on the total spent US dollars. total_byname&lt;- data %&gt;% group_by(specific_name) %&gt;% filter(!is.na(value))%&gt;% summarise(value=sum(as.numeric(value))) %&gt;% arrange(desc(value)) %&gt;% top_n(100) ## Selecting by value value_byname&lt;- value_byname %&gt;% mutate(shipment_year=as.numeric(as.character(shipment_year))) %&gt;% dplyr::filter(specific_name %in% total_byname$specific_name) value_byname &lt;- highlight_key(value_byname) widgets &lt;- bscols( widths = c(12, 12, 12), filter_select(&quot;specific name&quot;,&quot;specific name&quot;, value_byname, ~specific_name), filter_slider(&quot;Shipment Year&quot;, &quot;Years&quot;, value_byname, ~shipment_year) ) bscols( widths = c(4, 8), widgets, plot_ly(value_byname, x = ~shipment_year, y = ~value) %&gt;% add_lines(color = ~specific_name, colors = &quot;Dark2&quot;) %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by shipment year &amp; specific name&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ) specific name Years rm(widgets, total_byname, value_byname) 4.3 Content (number of items and kg) Let’s summarized the quantity brought per year. We’ll only include in the analysis those items measured in “number” and “kg” units, because they represent 99.45% of the data. It includes around 11,5 billions and 1,1 billion kg of wildlife items. quantity_year&lt;- data %&gt;% filter(unit==&quot;Number&quot;| unit==&quot;Kilograms&quot;) quantity_year_summary&lt;- quantity_year %&gt;% group_by(shipment_year, unit) %&gt;% summarise(quantity = sum(quantity)) DT::datatable(quantity_year_summary, filter = &#39;top&#39;, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 28: &#39;, htmltools::em(&#39;Quantity by shipment year&#39; ))) %&gt;% formatCurrency(&#39;quantity&#39;, currency = &quot;&quot;,interval = 3, mark = &quot;,&quot;) quantity_year_summary[quantity_year_summary$unit== &quot;Number&quot;, ] %&gt;% plot_ly(x=~shipment_year, y=~quantity,color=~shipment_year) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 44: Quantity (number of items) by shipment year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Quantity (number of items)&lt;/b&gt;&quot;)) quantity_year_summary[quantity_year_summary$unit== &quot;Kilograms&quot;, ] %&gt;% plot_ly(x=~shipment_year, y=~quantity, color=~shipment_year) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 45: Quantity (Kilograms) by shipment year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Quantity (Kilograms)&lt;/b&gt;&quot;)) rm(quantity_year, quantity_year_summary) 4.4 Refused shipments As we found in section 4.1.4., just 1.73% of shipments were refused. This would be the trend over time refused_segments&lt;- data %&gt;% filter(!is.na(action)) %&gt;% group_by(shipment_year, action) %&gt;% summarise(total = n()) %&gt;% mutate(percentage = total/sum(total)) %&gt;% dplyr::filter(action==&quot;Refused&quot;) DT::datatable(refused_segments, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 29: &#39;, htmltools::em(&#39;Refused shipments by shipment year&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) refused_segments%&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~shipment_year, y=~percentage, color=~shipment_year) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 46: Refused segments by shipment year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage of refused segments&lt;/b&gt;&quot;)) rm(refused_segments) "],
["explore-other-topics.html", "Chapter 5 Explore other topics 5.1 Total import (US dollars) by taxa 5.2 Total import (US dollars) by taxa &amp; description (Top 5). 5.3 Average import (US dollars) by taxa (for those with number and kg units) 5.4 Total import (US dollars) by description 5.5 Average import (US dollars) by description (for those with number and kg units) 5.6 Total import (US dollars) by name", " Chapter 5 Explore other topics 5.1 Total import (US dollars) by taxa total_bytaxa&lt;- data %&gt;% group_by(taxa) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% arrange(desc(value)) DT::datatable(total_bytaxa, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 30: &#39;, htmltools::em(&#39;Import (US dollars) by taxa&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) total_bytaxa %&gt;% plot_ly(x=~reorder(taxa, desc(value)), y=~value, color=~taxa) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 47: Import (US dollars) by taxa&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) rm(total_bytaxa) 5.2 Total import (US dollars) by taxa &amp; description (Top 5). total_bytaxa_descrip&lt;- data %&gt;% filter(taxa %in% c(&quot;mammal&quot;, &quot;shell&quot;, &quot;reptile&quot;, &quot;fish&quot;, &quot;insect&quot;)) %&gt;% group_by(taxa, description) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% mutate(percentage = value/sum(value)*100) %&gt;% arrange(desc(value)) %&gt;% top_n(3, value) 5.3 Average import (US dollars) by taxa (for those with number and kg units) average_bytaxa&lt;- data %&gt;% filter(unit==&quot;Number&quot;| unit==&quot;Kilograms&quot;) %&gt;% group_by(taxa, unit) %&gt;% filter(!is.na(value)) %&gt;% summarise(import_median_per_shipment=round(median(as.numeric(value)),2), import_median_per_unit = round(median(as.numeric(value)/quantity, na.rm=TRUE),2)) %&gt;% arrange(desc(import_median_per_shipment)) DT::datatable(average_bytaxa, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 31: &#39;, htmltools::em(&#39;Average import by taxa&#39; ))) %&gt;% formatCurrency(&#39;import_median_per_shipment&#39;,currency = &quot;$&quot;, interval = 3, mark = &quot;,&quot;) %&gt;% formatCurrency(&#39;import_median_per_unit&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) average_bytaxa[average_bytaxa$unit== &quot;Number&quot;, ] %&gt;% plot_ly(x=~reorder(taxa, desc(import_median_per_unit)), y=~import_median_per_unit, color=~taxa) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 48: Average import per unit by taxa (items measured by numbers)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Average import (US dollars)&lt;/b&gt;&quot;)) average_bytaxa[average_bytaxa$unit== &quot;Kilograms&quot;, ] %&gt;% plot_ly(x=~reorder(taxa, desc(import_median_per_unit)), y=~import_median_per_unit,color=~taxa) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 49: Average import per unit by taxa (items measured by Kilograms)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Average import (US dollars)&lt;/b&gt;&quot;)) rm(average_bytaxa) 5.4 Total import (US dollars) by description value_bydescription&lt;- data %&gt;% group_by(description) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% arrange(desc(value)) DT::datatable(value_bydescription, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 32: &#39;, htmltools::em(&#39;Import (US dollars) by description&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) value_bydescription %&gt;% top_n(15) %&gt;% plot_ly(x=~reorder(description, desc(value)), y=~value, color=~description) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 50: Import (US dollars) by description (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ## Selecting by value rm(value_bydescription) 5.5 Average import (US dollars) by description (for those with number and kg units) average_bydescription&lt;- data %&gt;% group_by(description) %&gt;% filter(n()&gt;=10) %&gt;% ungroup() %&gt;% filter(unit==&quot;Number&quot;| unit==&quot;Kilograms&quot;) %&gt;% group_by(description, unit) %&gt;% filter(!is.na(value)) %&gt;% summarise(import_median_per_shipment = round(median(as.numeric(value)),2), import_median_per_unit = round(median(as.numeric(value)/quantity, na.rm = TRUE),2)) %&gt;% arrange(desc(import_median_per_shipment)) DT::datatable(average_bydescription, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 33: &#39;, htmltools::em(&#39;Average import by description (for those with number and kg units)&#39; ))) %&gt;% formatCurrency(&#39;import_median_per_shipment&#39;,currency = &quot;$&quot;, interval = 3, mark = &quot;,&quot;) %&gt;% formatCurrency(&#39;import_median_per_unit&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) average_bydescription[average_bydescription$unit== &quot;Number&quot;, ] %&gt;% ungroup()%&gt;% top_n(15, import_median_per_unit) %&gt;% plot_ly(x=~reorder(description, desc(import_median_per_unit)), y=~import_median_per_unit, color=~description) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 51: Average import per unit by description (items measured by numbers)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Average import (US dollars)&lt;/b&gt;&quot;)) average_bydescription[average_bydescription$unit== &quot;Kilograms&quot;, ] %&gt;% ungroup()%&gt;% top_n(15, import_median_per_unit) %&gt;% plot_ly(x=~reorder(description, desc(import_median_per_unit)), y=~import_median_per_unit, color=~description) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Figure 52: Average import per unit by description (items measured by Kilograms)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Average import (US dollars)&lt;/b&gt;&quot;)) rm(average_bydescription) 5.6 Total import (US dollars) by name total_byname&lt;- data %&gt;% group_by(specific_name) %&gt;% filter(!is.na(value))%&gt;% summarise(value=sum(as.numeric(value))) %&gt;% arrange(desc(value)) DT::datatable(total_byname, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 34: &#39;, htmltools::em(&#39;Import (US dollars) by name&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) total_byname %&gt;% top_n(20) %&gt;% plot_ly(x=~reorder(specific_name, desc(value)), y=~value, color=~specific_name) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by name (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Name&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ## Selecting by value rm(total_byname) "],
["report.html", "Chapter 6 REPORT 6.1 BACKGROUND 6.2 KEY FINDINGS 6.3 EXPLORATORY ANALYSIS 6.4 GENERAL TRENDS 6.5 MONEY SPENT 6.6 LIMITATIONS", " Chapter 6 REPORT 6.1 BACKGROUND The aim of this study is to analyze United States wildlife and wildlife product imports. For this purpose, we reviewed 15 years (2000-2014) of data from the Law Enforcement Managment Information System (LEMIS), originally collected by the United States Fish and Wildlife Service (USFWS), cleaned, standardized and stored into a R package called lemis by EcoHealth Alliance. You can find more information about this dataset Here. 6.2 KEY FINDINGS The description “live specimens” and “trophies” was ranked as the first two based on the number of segments. Although jewelry and shells were the items with a higher number of items and meat was the item with a higher amount of kg. Most of the items were “specimens taken from the wild” and imported for “commercial” reasons. Most problematic countries were Indonesia, Canada, South Africa and The Philippines. All of them are in the top five countries of origin and in the top five countries of export. The top five ports of entry (Los Angeles, New York, Miami, Newark and San Francisco) were all designated ports. Half of the segments involved mammals and shells. And the top-five genus levels were Pinctada, Alligator, Ursus, Python and Mustela. 98.28% of segments were legally declared, just 1.73% was refused. Most of the refused shipments included items related with mammals and reptiles. They have been decreasing slightly since 2009. We can see a clear upward trend in the number of shipments from 2000 to 2006. Then, the curve reached its peak, decreased a bit, and started leveling off. On average, there is a higher average of shipments between August and November. There has been an upward trend in the amount of dollars spent from 2000 to 2012. Related to the taxa, Items that involve mammals, shells and reptiles generate the highest amount of money throughout the years, while items that involve annelids and spiders generate the lowest amount of money. Related to the type of product, Items that involve shell products, garment and live specimens have generated a high amount of money throughout the years, although items that involve dead animals and meat have increased dramatically the amount of money since 2008. METHOD AND DATA INCLUDED The data collected by EcoHealth Alliance includes records of plants, microorganisms and animals, among others. For this analysis, we’ll exclude those elements belonging to fungi, plantae, bacteria, chromista and unspecified kingdoms, considering only those organisms of the Kingdom Animalia. Between January 01, 2000, and December 31, 2014, around 2 million wildlife shipments were imported into the United States, involving around 11,5 billions of wildlife items plus 1,1 billion kg of wildlife items only measured in weight. A shipment refers to any container or group of containers that share a common control number, country of shipment and shipment date. Each shipment may be represented in the lemis dataset by multiple segments or rows, because the contents are derived from more than one species or type of product. The dataset includes taxonomic information (e.g., taxa, genus or species), wildlife description (type/form of the product such as “live specimens” or “jewelry”), quantity, unit (of the quantity metric, e.g. number or kg), value of the product (reported in US dollars), country of origin, country of export, purpose, source, action taken by USFWS on import, disposition of the shipment, disposition date, disposition year, shipment date, shipment year, import_export (whether the shipment was being imported to the EEUU or exported from the EEUU), port of entry, the US importing party, the foreign exporting party and cleaning notes generated during data cleaning. (See Appendix A and Appendix B for more information about data fields). We carried out three types of analyses: We carried out an exploratory analysis of the whole dataset, looking for relevant insights about the volume and the content. We analyzed general trends: number of shipments, percentage of refused shipments, money spent and amount of items. We analyzed the amount of money spent based on different categories 6.3 EXPLORATORY ANALYSIS A total of 2,079,637 unique shipments containing 5,451,832 segments were identified between January 01, 2000, and December 31, 2014. Of those, 60% (1,265,491 unique shipments) represented single segments. It means that for 1,265,491 shipments only one species and one type of product were discovered. The remaining 40% (814,146 unique shipments) contained 4,186,341 segments. These multiple segments shipments contained from 2 to 492 segments. The average number of segments in this kind of shipments was 5; the median was 3. 6.3.1 Description It represents the type/form of the wildlife product. The FWS Import/Export Key recognizes 94 different descriptions for wildlife items, although only 87 of them were used in this dataset. Based on the types of items by segment, most of them contain “Live specimens” (29%), followed by trophies (17%), “shell products” (9%), small leather products (7%) and jewelry (6%). Together, the top-five descriptions represent 68% of all segments (Figure 1) The description “live specimen” is the most common one. It refers to live animals and is mainly made up of corals (38%) and fish (23%). The second most common description is “trophy”,which refers to all the parts of one animal, if they are exported together (e.g. horns, skull, cape, backskin, tail and feet constitute one trophy). It’s almost entirely made from mammals (89%). “Shell products” (from mollusc or turtle) are almost entirely derived from shells (98%). The description “small leather products” includes belts, handbags, wallets and watch bands. Most of them are derived from reptiles (81%). Finally, the “jewelry” description (other than ivory jewelry) is mainly derived from shells (93%) (Figure 2). If we take into account the quantity of items in trade (instead of the number of segments): Based on the number of items, jewelry (other than ivory), shell (mollusc, raw or unworked), feather, hair product (including paint brush) and egg (dead or blown, excluding caviar) are the most common products (Figure 3). And based on the kg of items, meat, dead animal (whole animal), frog leg, live specimen and shell are the most common products (Figure 4). 6.3.2 Purpose It represents the declared reason the wildlife product is being imported. It’s declared by the importer. The FWS Import/Export Key recognizes 12 different purposes of import and all of them were used in this dataset. Based on the types of items by segment, most of them were imported for “Commercial” (75%) and “hunting trophies” (18%) purposes. Together, both purposes represent 92% of all segments (Figure 5). Most of the segments were imported for commercial purposes. Most of their items came from shells (27%), corals (17%) and reptiles (17%).The second most common purpose was “hunting trophies”. These imports involved mainly mammals (87%) and birds (13%). Personal imports involved mammals (49%), birds (14%) and reptiles (13%) (Figure 6). If we take into account the quantity of items in trade (instead of the number of segments): Based on the number of items, “reintroduction/introduction into the wild”, “breeding in captivity or artificial propagation” and “scientific” are the most common purposes (Figure 7). And based on the kg of items, “commercial” and “hunting trophies” are the most common purposes (Figure 8). 6.3.3 Source It represents the type of source within the origin country (e.g., wild, bred). The FWS Import/Export Key recognizes 10 different sources for wildlife items, although only 8 of them were used in this dataset. Based on the source of the items by segment, the most common sources in the segments are “specimens taken from the wild” (78%) and “animals bred in captivity” (15%). Together, both represent around 93% of all segments (Figure 9). 6.3.4 Ports, countries and trade routes The trade route involves the ports of entry, the country of export and the country of origin. 6.3.4.1 Country of origin The country of origin provides information about the real nature of wildlife traffic. Shipments come from 252 different countries of origin, although 75% of all the segments come from the same 15 countries. The top-five countries of origin were Indonesia (15%), Canada (10%), South Africa (9%), Philippines (8%) and China (7%). Together, they represent around 50% of all segments (Figure 10). Half of the segments originated from Indonesia were derived from corals (54%). More than half of the segments originated from the Philippines (62%) and China (58%) were derived from shells. Most of the segments originated from Canada (72%) and South Africa (82%) were derived from mammals (Figure 11). If we take into account the quantity of items in trade (instead of the number of segments): Based on the number of items, Indonesia, Japan, Thailand, Singapore and Hong Kong SAR China are the most common countries of origin (Figure 12). And based on the kg of items, China, South Korea, India, Canada and New Zealand are the most common countries of origin (Figure 13). 6.3.4.2 Country of export Shipments were exported to the UUEE from 257 different countries, although the top 15 represent 75% of all segments. The top-five countries of export were Canada (12%), Indonesia (12%), South Africa (8%), Philippines (8%) and Italy (7%) (Figure 14) Following a similar pattern, most of the segments exported from Canada (67%) and South Africa (94%) were derived from mammals. More than a half of the segments exported from Indonesia were derived from corals (69%). More than a half of the segments exported from the Philippines were derived from shells (60%). And finally, more than a half of the segments exported from Indonesia were derived from corals (69%) (Figure 15). If we take into account the quantity of items in trade (instead of the number of segments): Based on the number of items, Philippines, China, Thailand, Taiwan and Singapore are the most common countries of export (Figure 16).And based on the kg of items, China, South Korea, India, Canada and New Zealand are the most common countries of export (Figure 17). 6.3.4.3 Port of entry Although there are around 328 ports of entry into the EEUU, only 73 of them are represented in this dataset. This is because not all of them are covered by FWS wildlife inspectors. By law, only 18 of them are designated ports with full-time inspectors. Based on the number of segments, the top-five ports of entry were Los Angeles (20%), New York(19%), Miami(6%), Newark(5%) and San Francisco(5%). Together, they represent 56% of all segments. The top 15 represent 84% of all segments (Figure 18). It’s interesting to point out that the top-five ports of entry are all designated ports. Almost half of the segments imported into the EEUU through Los Angeles (42%) were derived from corals. Many of the segments imported through Newark (35%) and Miami (28%) are derived from reptiles. Many of the segments imported through New York (36%) and San Francisco (31%) were derived from mammals (Figure 19). If we take into account the quantity of items in trade (instead of the number of segments): Based on the number of items, Newark, New York, Chicago, Miami and Boston are the most common ports (Figure 20). And based on the kg of items, Los Angeles, Anchorage, Newark, Atlanta and Boston are the most common ports (Figure 21). 6.3.4.4 Trade Routes The top-five most used trade routes (from the country of export to the port of entry in the United States) emerged from this analysis were: Indonesia to Los Angeles, CA (7%), Italy to New York, NY (4%), South Africa to New York, NY (2%), Hong Kong SAR China to New York, NY (2%) and Philippines to Los Angeles, CA (2%). The trade route from Indonesia to Los Angeles, CA was used for segments derived mainly from corals (77%). More than a half of the segments in the trade route from Italy to New York, Ny derived from reptiles (58%). The trade routes from South Africa to New York (91%) and from Hong Kong SAR China to New York, NY (61%) derived from mammals. Finally, the trade route from Philippines to Los Angeles, CA (43%) was mainly used for segments derived from shells (Figure 22). 6.3.5 American corporations We have grouped the major corporations based on the company names, this way we will know which American corporations are importing the most. It represents around 18% of the data, covering around 1.000.000 segments. The top-five corporations related to fashion, luxury and design are Prada, Hermès, Richemont, Gucci and DFS Group (Figure 23). The top-five corporations related to animals or animal products providers are Arsian Imports, Dolphin International, Sea Dweling creatures, Underwater World and Walth Smith International (Figure 24). 6.3.6 Taxonomic classification The variables related to the taxa, genus and species provide us information to identify the wildlife or wildlife product. 6.3.6.1 Taxa level The taxa represents the USFWS-derived broad taxonomic categorization (using the provided “species_code” field and USFWS keys). It doesn’t represent a consistent biological classification scheme but a way of categorizing groups of organisms in the trade. In total, 13 different taxa categories were used in this dataset. Based on the segments, the top-five taxa levels were mammal (29%), shell (20%), reptile (13%), coral (12%) and fish (8%) (Figure 25). If we take into account the quantity of items in trade (instead of the number of segments): Based on the number of items, birds, mammals, crustaceans, echinoderms and reptiles are the most imported (Figure 26). And based on the kg of items, shells and fish are the most imported (Figure 27). 6.3.6.2 Genus level The genus represents the higher-level taxonomic name of the wildlife product. It corresponds to the taxonomic genus, but sometimes higher-level categorizations were provided when the genus was unknown (for example, “Tropical fish”). In total, 2663 different genus categories were used in this dataset. Based on the segments the top-five genus levels were Pinctada (6%), Alligator (3%), Ursus (3%), Python (2%) and Mustela (2%) (we didn’t take into account the “Tropical Fish” due to it’s not a genus-level taxonomic classification) (Figure 28). Pinctada was the most common imported genus. It’s a genus of saltwater oysters that includes nineteen species, although only nine of them were identified in the dataset. Pinctada maxima and pinctada margaritifera (two of the three major commercial pearl oyster species) made up 84% of pinctada segments (Figure 29). Most of the items from this genus were shell products (57%) or jewelry (37%). Alligator was the second most common imported genus. It’s a crocodilian that has two living species: the American or common alligator (A. mississippiensis) and the Chinese alligator (A. sinensis). Both of them were identified in the dataset, although the common alligator made up more than 99% of the alligator segments (Figure 29). Most of the items from this genus were small leather products (79%) or shoes (9%). Ursus was the third most common imported genus. It’s a genus in the family Ursidae (bears) that includes four widely distributed type of bears: the brown (U. arctos), the polar (U. maritimus), the American black (U. americanus) and the Asian black (U. thibetanus). All of them were identified in the dataset, although the American black bear made up around 94% of ursus segments (Figure 29). Most of the items from this genus were trophies (71%), skins (8%) and skulls (7%). Python was the fourth most common imported genus. It’s a genus of constricting snakes. Between seven and thirteen python species have been recognized (twelve of them were identified in the dataset). Python Reticulatus (popular to keep as pet) and P. Molurus made up around 80% of the python segments (Figure 29). Most of the items from this genus were small leather products (40%) and shoes (28%). Mustela was the fifth most common imported genus. It includes seventeen species that are small, active predators, with long and slender bodies and short legs (for example: vison, lutreola, nivalis and sibirica). M. vison (usually used in manufacturing coats, jackets and capes) made up around 86% of the mustela segments (Figure 29). Most of the items from this genus were garment (65%) and trims (16%). If we take into account the quantity of items in trade (instead of the number of segments): Based on the number of items, Pinctada, Tectus and Anadara are the most imported (Figure 30). And based on the kg of items, Illex, loligo and octopus are the most imported (Figure 31). 6.3.6.3 Species level It represents species of the wildlife product. In total, around 12.000 species were identified in this dataset (to get a more illustrative name, we combined genus and species). Based on the segments the top-five species were Alligator - mississippiensis (3%), Ursus - americanus (2%), Mustela - vison (2%), Struthio - camelus (2%) and Pinctada - margaritifera (2%) (Figure 32). Alligator - mississippiensis was the most common imported species. Most of them were small leather products and shoes (Figure 33) and were taken from the wild or bred in captivity (Figure 34). Ursus - americanus was the second most common imported species. Most of them were trophies (Figure 33) and were taken from the wild (Figure 34). Mustela - vison was the third most common imported species. Most of them were garment and trims (Figure 33) and were specimens originating from a ranching operation or bred in captivity (Figure 34). Struthio - camelus was the fourth most common imported species. Most of them were small leather products, shoes or feathers (Figure 33) and were bred in captivity or taken from the wild (Figure 34). Pinctada - margaritifera was the fifth most common imported species. Most of them were shell products and jewelry (Figure 33) and were specimens taken from the wild (Figure 34). If we take into account the quantity of items in trade (instead of the number of segments): Based on the number of items, Tectus - niloticus, Pinctada - margaritifera, Pinctada - fucata, Pinctada - martensii and Anadara - scapha are the most imported (Figure 35). And based on the kg of items, Illex - argentinus is the most imported (Figure 36). 6.3.7 Refused segments 98.28% of segments were legally declared, just 1.73% was refused. We can find cleared and refused segments in the same unique shipment. Most of the refused shipments included items related with mammals (e.g., Odocoileus, Loxodonta, Ursus, Panthera) and reptiles (e.g. Crocodylus, Python, Alligator, Cheloniidae (Figure 37) The top-five countries of origin for refused segments were: Unknown (24%), Mexico (14%), Canada (7%), Indonesia (6%) and China (6%). And the top-five countries of export for refused segments were: Mexico (19%), Canada (10%), China (8%), Indonesia (5%) and Philippines (4%) The top-five ports for refused segments come from four designated ports, New York, NY (9%), Anchorage, AK (8%), Los Angeles, CA (8%), San Francisco, CA (6%) and one nondesignated staffed port, El Paso, TX (8%). If we compare the top-five ports for all imports and the top-five ports for refused segments, only three ports are the same (Los Angeles, New York and San Francisco) while the other two ports differ. 6.4 GENERAL TRENDS The trends analysis focused on the number of shipments, the import (US dollars), the quantity and the capacity of identifying illegal shipments (refused shipments). 6.4.1 Wildlife shipments In the 15 years analyzed, there are 2,079,637 unique shipments containing 5,451,832 segments. We can see a clear upward trend in the number of cases from 2000 to 2006. Then, the curve reached its peak with around 162,000 unique shipments, decreased a bit, and started leveling off (Figure 38). On a monthly basis, independently of the year, we can identify fluctuations in the trade. On average, there is a higher average of shipments between August and November (Figure 39). 6.4.2 Import (US dollars) There has been an upward trend in the amount of dollars spent from 2000 to 2012 (Figure 40). Although, it’s important to take into account that we don’t have enough information about the amount of money spent between 2008-2011 and 2013-2014 (Figure 41). If we analyze the amount of money spent by shipment year and taxa, we find that items that involve mammals, shells and reptiles generate the highest amount of money throughout the years, while items that involve annelids and spiders generate the lowest amount of money (Figure 42). If we analyze the amount of money spent by shipment year and description, we find that items that involve shell products, garment and live specimens have generated a high amount of money throughout the years, although items that involve dead animals and meat have increased dramatically the amount of money since 2008 (Figure 43). 6.4.3 Quantity We summarized the quantity bought per year. We only included in the analysis those items measured in “number” and “kg” units, because they represented 99.45% of the data. It included around 11,5 billions of wildlife items plus 1,1 billion kg of wildlife items only measured in weight (Figure Figure 44 and 45). 6.4.4 Refused segments As we mentioned before, 98.28% of imports were legally declared, just 1.73% was refused. We can see that refused segments have been decreasing slightly since 2009 (Figure 46). 6.5 MONEY SPENT We analyzed what are the taxa and descriptions that spent the higher amount of money (by total import and average import) during this period of time. If we analyze the data based on the total import, items that involved mammals, shell and reptiles generate the highest amount of money (Figure 47). Mammal was the taxa with the highest expense (around 7 billion dollars). More than a half of this amount derived from items that involved garment (22%), ivory carving (22%) and skin (18%). Shell was the taxa with the second highest expense (around 4 billion dollars). Most of this amount derived from items that involved shell products (52%), meat (24%) and jewelry (15%). Reptile was the taxa with the third highest expense (around 2.7 billion dollars). Most of this amount derived from items that involved small leather products (46%), shoes (28%) and large leather products (10%). Although, if we analyzed the data based on the average import, items that involved reptiles and mammals had the highest average import by unit (Figure 48). And items that involved echinoderms and annelid had the highest average import by kg (Figure 49). If we analyze the data based on the total import, items that involve shell products, skins and garment generate the highest amount of money (Figure 50). Although, if we analyzed the data based on the average import, items that involved shell products had the highest average import by unit (Figure 51). And items that involved piano with ivory keys and calipees had the highest average import by kg (Figure 52). 6.6 LIMITATIONS As with all studies, there are some limitations we should bear in mind. First, the LEMIS dataset covers only those imports cleared and refused by the wildlife inspectors. So, there will be many illegal shipments not included in this analysis. Second, there is a lack of precision in the species analysis because part of the data includes missing values and generic identifiers like “sp”, “tropical fish” or “marine sp.” Third, we don’t know how representative this study is of the international trade in wildlife, since the LEMIS dataset is only focused on the imports into the EEUU. Despite these limitations, we hope these results can help to understand more deeply the situation of wildlife trafficking into the EEUU and take things a step further understanding the big picture of the global trade of wildlife. "]
]
