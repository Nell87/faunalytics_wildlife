[
["index.html", "Faunalytics - Wildlife trade dataset Chapter 1 Introduction 1.1 Summary", " Faunalytics - Wildlife trade dataset 2020-06-04 Chapter 1 Introduction This report is intended to explore some ideas about LEMI dataset accessed with the lemis R package. LEMIS wildlife trade data trends from 2000 through 2014. You can read more about this dataset Here 1.1 Summary All the shipments are imports. Only a very small percentage of them was refused by the USFWS (1.73%) 54% of dispositions took place within a month of the shipment date (most of them within a week) Most problematic countries are on both sides (country of origin &amp; country to/from which the wildlife product is shipped) These are the American corporations that are importing the most. There has been an upward trend in the amount of dollars spent from 2000 to 2012 (Although we don’t have enough information about this variable in the data produced between 2008-2011 and 2013-2014. For more information, check the section 2.1.1.). Most of the products are “Live specimens” (29.1%), followed by trophies (16.83%) and “Shell products” (9.49%), mainly import by commercial purposes (74.6%). Most of the imports are mammals (29.16%), followed by shells (20.34%), reptiles (13.29%) and corals (12.63%) "],
["data-quality-cleaning.html", "Chapter 2 Data quality &amp; cleaning 2.1 Missing values 2.2 Excluding plants and microorganisms", " Chapter 2 Data quality &amp; cleaning 2.1 Missing values Only four variables have more than 30% missing values. Most of them are below 10% # Are there missing values? missing_values &lt;- data %&gt;% gather(key = &quot;key&quot;, value = &quot;val&quot;) %&gt;% mutate(is_missing = is.na(val)) %&gt;% group_by(key, is_missing) %&gt;% summarise(num_missing = n()/nrow(data) *100) %&gt;% filter(is_missing==T) %&gt;% select(-is_missing) %&gt;% arrange(desc(num_missing)) plot_ly(missing_values, x=~reorder(key, desc(num_missing)), y=~num_missing, color=~key) %&gt;% add_bars() %&gt;% add_text(text=~round(num_missing),textposition = &#39;top&#39;) %&gt;% layout(title = &quot;&lt;b&gt;Missing values per variable&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Variable&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Number of missing values&lt;/b&gt;&quot;)) rm(missing_values) 2.1.1 Missing values in “value” year over year If we have a look at the “value” variable (dollars), we can notice that there isn’t enough information about it in the data produced between 2008-2011 and 2013-2014. Specifically, the years 2008, 2009, 2010 and 2014 only contain missing values missing_value&lt;- data %&gt;% select(shipment_year, value) %&gt;% group_by(shipment_year) %&gt;% summarise(missing = sum(is.na(value)/n())*100, complete= round(100 - sum(is.na(value)/n())*100,2)) %&gt;% gather(&quot;key&quot;, &quot;percentage&quot;, missing, complete) ggplot(data=missing_value, aes(x=shipment_year, y=percentage, fill=key)) + geom_bar(position = &quot;dodge&quot;, stat = &quot;identity&quot;) + theme_bw() + facet_grid(~shipment_year,scales = &quot;free_x&quot;) + scale_fill_manual(values=c(&quot;springgreen4&quot;, &quot;rosybrown&quot;)) rm(missing_value) 2.2 Excluding plants and microorganisms We classified 98.93 % of data by kingdoms using the class, taxa and genus columns. This way, we excluded those elements belonging to fungi, plantae, bacteria, chromista and unspecified kingdoms. Bacterias: Gammaproteobacteria Chromista: Phaeophyceae Plantae: Cycadopsida, Liliopsida, Magnoliopsida, Pinopsida, Polypodiopsida Fungi: Agaricomycetes, Chytridiomycetes Animalia: Actinopterygii, Amphibia, Anthozoa, Arachnida, Ascidiacea, Asteroidea, Aves, Bivalvia, Branchiopoda, Calcarea, Cephalaspidomorphi, Cephalopoda, Cestoda, Chilopoda, Clitellata, Cubozoa, Demospongiae, Diplopoda, Echinoidea, Elasmobranchii, Enteropneusta, Eurotatoria,Gastropoda, Gymnolaemata, Hexactinellida, Hexanauplia, Holocephali, Holothuroidea, Hoplonemertea, Hydrozoa, Insecta, Leptocardii, Malacostraca, Mammalia, Maxillopoda,Merostomata, Myxini, Ophiuroidea, Ostracoda, Pilidiophora, Polychaeta, Polyplacophora, Pycnogonida, Reptilia, Sarcopterygii, Scaphopoda, Scyphozoa, Secernentea, Sipunculidea, Tentaculata, Thaliacea, Trematoda # classifying classes by kingdom classes&lt;-data %&gt;% drop_na(class) %&gt;% group_by(class) %&gt;% summarise(N=n()) animalia_kingdom &lt;- c(&quot;Actinopterygii&quot;, &quot;Amphibia&quot;, &quot;Anthozoa&quot;, &quot;Arachnida&quot;, &quot;Ascidiacea&quot;, &quot;Asteroidea&quot;, &quot;Aves&quot;, &quot;Bivalvia&quot;, &quot;Branchiopoda&quot;, &quot;Calcarea&quot;, &quot;Cephalaspidomorphi&quot;, &quot;Cephalopoda&quot;, &quot;Cestoda&quot;, &quot;Chilopoda&quot;, &quot;Clitellata&quot;, &quot;Crinoidea&quot;, &quot;Cubozoa&quot;, &quot;Demospongiae&quot;, &quot;Diplopoda&quot;, &quot;Echinoidea&quot;, &quot;Elasmobranchii&quot;, &quot;Enteropneusta&quot;, &quot;Eurotatoria&quot;, &quot;Gastropoda&quot;, &quot;Gymnolaemata&quot;, &quot;Hexactinellida&quot;,&quot;Hexanauplia&quot;, &quot;Holocephali&quot;, &quot;Holothuroidea&quot;, &quot;Hoplonemertea&quot;, &quot;Hydrozoa&quot;, &quot;Insecta&quot;, &quot;Leptocardii&quot;, &quot;Malacostraca&quot;, &quot;Mammalia&quot;, &quot;Maxillopoda&quot;, &quot;Merostomata&quot;, &quot;Myxini&quot;, &quot;Ophiuroidea&quot;, &quot;Ostracoda&quot;, &quot;Pilidiophora&quot;, &quot;Polychaeta&quot;, &quot;Polyplacophora&quot;, &quot;Pycnogonida&quot;, &quot;Reptilia&quot;, &quot;Sarcopterygii&quot;, &quot;Scaphopoda&quot;, &quot;Scyphozoa&quot;, &quot;Secernentea&quot;, &quot;Sipunculidea&quot;, &quot;Tentaculata&quot;, &quot;Thaliacea&quot;, &quot;Trematoda&quot;) fungi_kingdom &lt;-c(&quot;Agaricomycetes&quot;, &quot;Chytridiomycetes&quot;) plantae_kingdom&lt;- c(&quot;Cycadopsida&quot;, &quot;Liliopsida&quot;, &quot;Magnoliopsida&quot;, &quot;Pinopsida&quot;, &quot;Polypodiopsida&quot;, &quot;Ulvophyceae&quot;) bacterias_kingdom &lt;- c(&quot;Gammaproteobacteria&quot;) chromista_kingdom &lt;- c(&quot;Phaeophyceae&quot;) # Adding kingdom level based on class data$kingdom&lt;- ifelse(data$class %in% animalia_kingdom, &quot;Animalia&quot;, ifelse(data$class %in% fungi_kingdom, &quot;Fungi&quot;, ifelse(data$class %in% plantae_kingdom, &quot;Plantae&quot;, ifelse(data$class %in% bacterias_kingdom, &quot;Bacteria&quot;, ifelse(data$class %in% chromista_kingdom, &quot;Chromista&quot;, &quot;Other&quot; ))))) # 403,596 unclassified # Adding kingdom level based on genus data$kingdom[which(data$genus==&quot;Other live inverts&quot; | data$genus==&quot;Animals&quot; | data$genus==&quot;Corals&quot;| data$genus==&quot;Dugesia&quot;| data$genus==&quot;Nemertea&quot; | data$genus==&quot;Mollusca&quot; | data$genus==&quot;Xenoturbella&quot; | data$genus==&quot;Chondrichthyes&quot; | data$genus==&quot;Chordata&quot; | data$genus==&quot;Paracatenula&quot; | data$genus==&quot;Porifera&quot;)] &lt;- &quot;Animalia&quot; # 299,674 unclassified # Adding kingdom level based on taxa data$kingdom[which(data$taxa==&quot;crustacean&quot; | data$taxa==&quot;fish&quot; | data$taxa==&quot;coral&quot;| data$taxa==&quot;shell&quot;)] &lt;- &quot;Animalia&quot; # 58,883 unclassified data$kingdom[which(data$taxa==&quot;plant&quot;)] &lt;- &quot;Plantae&quot; # 58,855 unclassified # Let&#39;s exclude those elements from fungi, plantae, bacteria, chromista and unspecified kingdoms. data &lt;- data %&gt;% filter(kingdom==&quot;Animalia&quot;) # 5,512,706 --&gt; 5,451,832 rows rm(classes, animalia_kingdom, bacterias_kingdom, chromista_kingdom, plantae_kingdom, fungi_kingdom) "],
["exploratory-analysis.html", "Chapter 3 Exploratory analysis 3.1 Variables related with the trade process: 3.2 Variables related with the countries 3.3 Variables related with the product 3.4 More data cleaning after exploratory analysis", " Chapter 3 Exploratory analysis Here you can check data fields and fields descriptions for all variables appearing in the dataset Variables related with the trade process: control_number: It represents a unique individual shipment processed by the USFWS. quantity: It represents the numeric quantity of the wildlife produc unit: It represents the unit for the numeric quantity import_export: It represents whether the shipment is an (I)mport or (E)xport action: Action taken by USFWS on import ((C)leared/(R)efused) shipment_date: Full date when shipment arrived shipment_year: Year when the shipment arrived (derived from “shiptment_year”) disposition: Fate of the import disposition_date: Full date when disposition occurred disposition_year: Year when disposition occurred (derived from “disposition_date”) Variables related with the countries: country_origin: It represents the code for the country of origin of the wildlife product country_imp_exp: It represents the code for the country to/from which the wildlife product is shipped port: It represents the port or region of shipment entry us_co: It represents the US party of the shipment foreign_co: It represents the foreign party of the shipment Variables related with the product: description: It represents the type/form of the wildlife product value: It represents the reported value of the wildlife product in US dollars purpose: It represents the reason the wildlife product is being imported source: It represents the type of source within the origin country (e.g., wild, bred) species_code: It represents the USFWS code for the wildlife product taxa: It represents the USFWS-derived broad taxonomic categorization class: It represents the EHA-derived class-level taxonomic designation genus: It represents the Genus (or higher-level taxonomic name) of the wildlife product species: It represents species of the wildlife product subspecies: It represents subspecies of the wildlife product specific_name: It represents a specific common name for the wildlife product generic_name: It represents a general common name for the wildlife product 3.1 Variables related with the trade process: 3.1.1 control_number It represents a unique individual shipment processed by the USFWS. There are 2,088,676 unique shiptments Different wildlife products contained within the same shipment may be represented in the LEMIS data by multiple data rows, all of which share a common ‘control_number’. All rows of data sharing the same ‘control_number’ share the same country of shipment and shipment date. 3.1.2 quantity and unit Quantity represents the numeric quantity of the wildlife product, while unit represents the unit of measure for the numeric quantity. There are 13 types of units. 94.64% of data is represented with the unit “numbers” # Renaming levels data &lt;- data %&gt;% mutate(unit = recode(unit, &quot;NO&quot; = &quot;Number&quot;, &quot;KG&quot; = &quot;Kilograms&quot;, &quot;GM&quot;= &quot;Grams&quot;, &quot;M2&quot;=&quot;Square_meters&quot;, &quot;LT&quot;= &quot;Liters&quot;, &quot;ML&quot;= &quot;Milliliters&quot;, &quot;MT&quot;=&quot;Meters&quot;, &quot;CM&quot; = &quot;Centimeters&quot;, &quot;C3&quot;= &quot;Cubic_centimeters&quot;, &quot;C2&quot;=&quot;Square_centimeters&quot;, &quot;MG&quot;=&quot;Miligrams&quot;, &quot;M3&quot;=&quot;Cubic_meters&quot;)) units &lt;-data %&gt;% group_by(unit) %&gt;% summarise(total = n(),percentage=n()/nrow(data)) %&gt;% drop_na(unit) %&gt;% arrange(desc(percentage)) DT::datatable(units, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 1: &#39;, htmltools::em(&#39;Units of measure&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) units %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(unit, desc(percentage)), y=~percentage, color=~unit) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Units of measure&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Units&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(units) 3.1.3 import_export It represents Whether the shipment is an (I)mport or (E)xport. In this dataset, 100% of the data is an import. # Renaming levels data &lt;- data %&gt;% mutate(import_export = recode(import_export, &quot;I&quot; = &quot;Import&quot;)) imports &lt;-data %&gt;% group_by(import_export) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% arrange(desc(percentage)) DT::datatable(imports, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 2: &#39;, htmltools::em(&#39;Shipments: Imports and exports&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) imports %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(import_export, desc(percentage)), y=~percentage, color=~import_export) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Shipments: Imports and exports&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Imports and exports&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(imports) 3.1.4 action Action taken by the USFWS on import ((C)leared/(R)efused) 98.28% of imports are cleared, just 1.73% is refused # Renaming levels data &lt;- data %&gt;% mutate(action = recode(action, &quot;C&quot; = &quot;Cleared&quot;, &quot;R&quot;= &quot;Refused&quot;)) action &lt;-data %&gt;% group_by(action) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(action) %&gt;% arrange(desc(percentage)) DT::datatable(action, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 3: &#39;, htmltools::em(&#39;Action taken by the USFWS on imports&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) action %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(action, desc(percentage)), y=~percentage, color=~action) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Action taken by the USFWS on imports&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Actions&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(action) 3.1.5 disposition It represents the fate of the import There are 5 categories: C, S, A, R and non-standard value The C category represents 98.3% of data disposition &lt;-data %&gt;% group_by(disposition) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(disposition) %&gt;% arrange(desc(percentage)) DT::datatable(disposition, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 4: &#39;, htmltools::em(&#39;Fate of the import&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) disposition %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(disposition, desc(percentage)), y=~percentage, color=~disposition) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Fate of the import&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Dispositions&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(disposition) 3.1.6 shipment_date and disposition_date Shipment_date represents the date when shipment arrived, while disposition_date represents the date when disposition occurred. 54% of dispositions took place within a month of the shipment date (most of them within a week) While ‘shipment_date’ entries fell completely within the time period of 2000–2014, ‘disposition_date’ ranged more widely Users should be wary of any disposition date values that precede the associated shipment date, as we are unaware of how this could represent an accurate accounting of the product disposition process. However, for many potential analyses, differences in the date fields may not be a significant cause for concern because ‘shipment_date’ alone provides a sound index for those interested in temporal trends in wildlife trade days&lt;- data %&gt;% mutate(days = as.factor(as.numeric(disposition_date - shipment_date))) %&gt;% group_by(days) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% filter(days %in% c(&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;, &quot;16&quot;, &quot;17&quot;, &quot;18&quot;, &quot;19&quot;, &quot;20&quot;, &quot;21&quot;, &quot;22&quot;, &quot;23&quot;, &quot;24&quot;, &quot;25&quot;, &quot;26&quot;, &quot;27&quot;, &quot;28&quot;, &quot;29&quot;, &quot;30&quot;)) DT::datatable(days, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 5: &#39;, htmltools::em(&#39;Number of dispositions within a month of the shipment date&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) days %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(days, percentage), y=~percentage) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Percentage of dispositions within a month of the shipment date&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Days&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(days) 3.2 Variables related with the countries 3.2.1 country_origin It represents the code for the country of origin of the wildlife product There are 252 countries of origin The top 15 represents 74.5% of data The top 50 represents 94.4% of data # Renaming levels) data$country_origin&lt;- countrycode(data$country_origin, &quot;iso2c&quot;, &quot;country.name&quot;, nomatch = NULL) data &lt;- data %&gt;% mutate(country_origin = recode(country_origin, &quot;AN&quot; = &quot;Netherlands Antilles&quot;, &quot;XX&quot; = &quot;Unknown&quot;,&quot;ZZ&quot; = &quot;High Seas&quot;)) country_origin &lt;-data %&gt;% group_by(country_origin) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(country_origin) %&gt;% arrange(desc(percentage)) DT::datatable(country_origin, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 6: &#39;, htmltools::em(&#39;Country of origin of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) country_origin %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(30, percentage) %&gt;% plot_ly(x=~reorder(country_origin, desc(percentage)), y=~percentage, color=~country_origin) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Country of origin of the wildlife product (Top 30)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country of origin&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) 3.2.2 country_imp_exp It represents the code for the country to/from which the wildlife product is shipped There are 257 countries to/from which the product is shipped The top 15 represents 75.9% of data The top 50 represents 95.9% of data # Renaming levels) data$country_imp_exp&lt;- countrycode(data$country_imp_exp, &quot;iso2c&quot;, &quot;country.name&quot;, nomatch = NULL) data &lt;- data %&gt;% mutate(country_imp_exp = recode(country_imp_exp, &quot;AN&quot; = &quot;Netherlands Antilles&quot;, &quot;XX&quot; = &quot;Unknown&quot;,&quot;ZZ&quot; = &quot;High Seas&quot;)) country_imp_exp &lt;-data %&gt;% group_by(country_imp_exp) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(country_imp_exp) %&gt;% arrange(desc(percentage)) DT::datatable(country_imp_exp, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 7: &#39;, htmltools::em(&#39;Country to/from which the wildlife product is shipped&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) country_imp_exp %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(30, percentage) %&gt;% plot_ly(x=~reorder(country_imp_exp, desc(percentage)), y=~percentage, color=~country_imp_exp) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Country to/from which the wildlife product is shipped (Top 30)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;country_imp_exp&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) Most problematic countries are on both sides (country of origin &amp; country to/from which the wildlife product is shipped) country_origin &lt;- country_origin %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(4, percentage) %&gt;% rename(country = country_origin) country_imp_exp &lt;- country_imp_exp %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(4, percentage) %&gt;% rename(country = country_imp_exp) countries&lt;- combine(country_origin, country_imp_exp) countries %&gt;% plot_ly(x=~reorder(country, desc(percentage)), y=~percentage, color=~source) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Most problematic countries&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Country&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(country_origin) rm(country_imp_exp) rm(countries) 3.2.3 port It represents the port or region of shipment entry There are 73 ports The top 15 represents 83.9% of data # Renaming levels data &lt;- data %&gt;% mutate(port = recode(port, &quot;LA&quot; = &quot;Los Angeles, CA&quot;,&quot;NY&quot; = &quot;New York, NY&quot;, &quot;MI&quot; = &quot;Miami, FL&quot;, &quot;NW&quot; = &quot;Newark, NJ&quot;, &quot;SF&quot; = &quot;San Francisco, CA&quot;, &quot;CH&quot; = &quot;Chicago, IL&quot;, &quot;DF&quot; = &quot;Dallas/Fort Worth, TX&quot;, &quot;LO&quot; = &quot;Louisville, KY &quot;, &quot;AN&quot; = &quot;Anchorage, AK&quot;, &quot;HN&quot;= &quot;Houston, TX&quot;, &quot;ME&quot; = &quot;Memphis, TN&quot;, &quot;AT&quot; = &quot;Atlanta, GA&quot;,&quot;HA&quot; = &quot;Honolulu, HI&quot;, &quot;SE&quot; = &quot;Seattle, WA&quot;, &quot;PB&quot; = &quot;Pembina, ND&quot;)) port &lt;-data %&gt;% group_by(port) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(port) %&gt;% arrange(desc(percentage)) DT::datatable(port, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 8: &#39;, htmltools::em(&#39;Port or region of shipment entry&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) port %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(port, desc(percentage)), y=~percentage, color=~port) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Port or region of shipment entry (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Port&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(port) 3.2.4 us_co It represents the US party of the shipment We have excluded the “EXEMPTIONS 6 AND 7(C)” from the analysis. There are 126,052 US parties The top 15 just represents 10.3% of data The top 50 just represents 19 % of data us_co &lt;-data %&gt;% filter(!us_co == &quot;EXEMPTIONS 6 AND 7(C)&quot;) %&gt;% group_by(us_co) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(us_co) %&gt;% arrange(desc(percentage)) DT::datatable(us_co, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 9: &#39;, htmltools::em(&#39;US party of the shipment&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) us_co %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(us_co, desc(percentage)), y=~percentage, color=~us_co) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;US party of the shipment (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;US party&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(us_co) We want to analyze which American corporations are importing the most. So, we have grouped the mayor corporations based on the company names. We’ve grouped most of those companies that represent at least 19% of the data, covering approximately 1.000.000 observations. data$corporation&lt;- # Fashion/Luxury/Design products ifelse(grepl(&quot;prada&quot;, data$us_co, ignore.case = TRUE), &quot;Prada&quot;, ifelse(grepl(&quot;ralph lauren&quot;, data$us_co, ignore.case = TRUE), &quot;Ralph Lauren&quot;, ifelse(grepl(&quot;LOUIS VUITTON&quot;, data$us_co, ignore.case = TRUE), &quot;Louis Vuitton&quot;, ifelse(grepl(&quot;MONCLER&quot;, data$us_co, ignore.case = TRUE), &quot;Moncler&quot;, ifelse(grepl(&quot;BOTTEGA VENETA&quot;, data$us_co, ignore.case = TRUE), &quot;Bottega Veneta&quot;, ifelse(grepl(&quot;RICHEMONT&quot;, data$us_co, ignore.case = TRUE), &quot;Richemont&quot;, ifelse(grepl(&quot;FENDI&quot;, data$us_co, ignore.case = TRUE), &quot;Fendi&quot;, ifelse(grepl(&quot;HERMES&quot;, data$us_co, ignore.case = TRUE), &quot;Hermès&quot;, ifelse(grepl(&quot;GUCCI&quot;, data$us_co, ignore.case = TRUE), &quot;Gucci&quot;, ifelse(grepl(&quot;Beeline&quot;, data$us_co, ignore.case = TRUE), &quot;Beeline Group&quot;, ifelse(grepl(&quot;fossil partner&quot;, data$us_co, ignore.case = TRUE), &quot;Fossil Partners, L.P.&quot;, ifelse(grepl(&quot;dfs&quot;, data$us_co, ignore.case = TRUE), &quot;DFS Group&quot;, ifelse(grepl(&quot;gluck&quot;, data$us_co, ignore.case = TRUE), &quot;E. Gluck Corporation&quot;, ifelse(grepl(&quot;ferragamo&quot;, data$us_co, ignore.case = TRUE), &quot;Salvatore Ferragamo&quot;, ifelse(grepl(&quot;jacadi&quot;, data$us_co, ignore.case = TRUE), &quot;Jacadi&quot;, ifelse(grepl(&quot;bomac&quot;, data$us_co, ignore.case = TRUE), &quot;Bomac International Corp&quot;, ifelse(data$us_co %in% c(&quot;PIER I IMPORTS, INC.&quot;, &quot;PIER 1 IMPORTS, INC. &quot;), &quot;Pier 1&quot;, # Museums ifelse(grepl(&quot;museum&quot;, data$us_co, ignore.case = TRUE), &quot;Museums&quot;, ifelse(grepl(&quot;smithsonian&quot;, data$us_co, ignore.case = TRUE), &quot;Museums&quot;, # Animals or animal products providers ifelse(grepl(&quot;SEA DWELLING&quot;, data$us_co, ignore.case = TRUE), &quot;Sea Dwelling creatures&quot;, ifelse(grepl(&quot;HIPPOCAMPE&quot;, data$us_co, ignore.case = TRUE), &quot;Hippocampe USA&quot;, ifelse(grepl(&quot;AQUA-NAUTIC&quot;, data$us_co, ignore.case = TRUE), &quot;Aqua Nautic Specialist&quot;, ifelse(grepl(&quot;UNDERWATER WORLD&quot;, data$us_co, ignore.case = TRUE), &quot;Underwater World&quot;, ifelse(grepl(&quot;GOLDEN INA&quot;, data$us_co, ignore.case = TRUE), &quot;Golden Ina&quot;, ifelse(grepl(&quot;QUALITY MARINE&quot;, data$us_co, ignore.case = TRUE), &quot;Quality Marine&quot;, ifelse(grepl(&quot;Arsian&quot;, data$us_co, ignore.case = TRUE), &quot;Arsian Imports&quot;, ifelse(grepl(&quot;aquarium arts&quot;, data$us_co, ignore.case = TRUE), &quot;Aquarium Arts&quot;, ifelse(grepl(&quot;WALT SMITH&quot;, data$us_co, ignore.case = TRUE), &quot;Walt Smith International&quot;, ifelse(grepl(&quot;all seas fisheries&quot;, data$us_co, ignore.case = TRUE), &quot;Allseas Fisheries&quot;, ifelse(grepl(&quot;sun pet ltd&quot;, data$us_co, ignore.case = TRUE), &quot;Sun Pet LTD&quot;, ifelse(grepl(&quot;pacific aqua farms&quot;, data$us_co, ignore.case = TRUE), &quot;Pacific Aquafarms&quot;, ifelse(grepl(&quot;INTINENTAL&quot;, data$us_co, ignore.case = TRUE), &quot;Intinental Pri&quot;, ifelse(grepl(&quot;AQUACO&quot;, data$us_co, ignore.case = TRUE), &quot;Aquaco&quot;, ifelse(grepl(&quot;all seas marine&quot;, data$us_co, ignore.case = TRUE), &quot;Allseas Marine&quot;, ifelse(grepl(&quot;transship discounts&quot;, data$us_co, ignore.case = TRUE), &quot;Transship Discounts LTD&quot;, ifelse(grepl(&quot;SEGREST FARMS&quot;, data$us_co, ignore.case = TRUE), &quot;Segrest Farms&quot;, ifelse(grepl(&quot;fish head&quot;, data$us_co, ignore.case = TRUE), &quot;Fish Heads Inc&quot;, ifelse(grepl(&quot;holiday coral&quot;, data$us_co, ignore.case = TRUE), &quot;Holiday Coral Inc&quot;, ifelse(grepl(&quot;pacific island imp&quot;, data$us_co, ignore.case = TRUE), &quot;Pacific Island Imports&quot;, ifelse(grepl(&quot;PAN OCEAN AQUARIUM&quot;, data$us_co, ignore.case = TRUE), &quot;Pan Ocean Aquarium, Inc&quot;, ifelse(grepl(&quot;SALTWATER INC.&quot;, data$us_co, ignore.case = TRUE), &quot;Saltwater Inc&quot;, ifelse(grepl(&quot;saltwaterfish&quot;, data$us_co, ignore.case = TRUE), &quot;Saltwaterfish&quot;, ifelse(grepl(&quot;golden sea int&quot;, data$us_co, ignore.case = TRUE), &quot;Golden Sea Inc&quot;, ifelse(grepl(&quot;strictly reptiles&quot;, data$us_co, ignore.case = TRUE), &quot;Strictly Reptiles Inc&quot;, ifelse(grepl(&quot;emark tropical&quot;, data$us_co, ignore.case = TRUE), &quot;Emark Tropical Imports, Inc&quot;, ifelse(data$us_co %in% c(&quot;DOLPHIN INTERNATIONAL&quot;, &quot;DOLPHIN INT&#39;L&quot;, &quot;DOLPHIN INTERNAITONAL&quot;), &quot;Dolphin International&quot;, ifelse(data$us_co %in% c(&quot;a &amp; m aquatics&quot;, &quot;A&amp;M AQUATICS&quot;), &quot;A&amp;M Aquatics&quot;, ifelse(data$us_co %in% c(&quot;LPS LLC&quot;, &quot;LPS, LLC&quot;, &quot;LPS&quot;), &quot;LPS LLC&quot;, ifelse(data$us_co %in% c(&quot;APET, INC&quot;, &quot;APET INC&quot;), &quot;Apet Inc&quot;, &quot;Other&quot;))))))))))))))))))))))))))))))))))))))))))))))))) data_corporations &lt;- data %&gt;% mutate(corporation = as.factor(corporation)) # Let&#39;s classify these corporations corp_fashion&lt;- c(&quot;Beeline Group&quot;, &quot;Bomac International Corp&quot;, &quot;Bottega Veneta&quot;, &quot;DFS Group&quot;,&quot;E. Gluck Corporation&quot;, &quot;Fendi&quot;, &quot;Fossil Partners, L.P.&quot;, &quot;Gucci&quot;, &quot;Hermès&quot;, &quot;Jacadi&quot;, &quot;Louis Vuitton&quot;,&quot;Moncler&quot;, &quot;Pier 1&quot;,&quot;Prada&quot;, &quot;Ralph Lauren&quot;, &quot;Richemont&quot;, &quot;Salvatore Ferragamo&quot;) corp_animalproviders&lt;-c(&quot;A&amp;M Aquatics&quot;, &quot;Aqua Nautic Specialist&quot;, &quot;Aquaco&quot;, &quot;Aquarium Arts&quot;, &quot;Allseas Fisheries&quot;, &quot;Allseas Marine&quot;, &quot;Apet Inc&quot;, &quot;Arsian Imports&quot;, &quot;Dolphin International&quot;, &quot;Emark Tropical Imports, Inc&quot;, &quot;Fish Heads Inc&quot;, &quot;Golden Ina&quot;, &quot;Golden Sea Inc&quot;, &quot;Hippocampe USA&quot;, &quot;Holiday Coral Inc&quot;, &quot;Intinental Pri&quot;, &quot;LPS LLC&quot;, &quot;Pacific Aquafarms&quot;, &quot;Pacific Island Imports&quot;, &quot;Pan Ocean Aquarium, Inc&quot;, &quot;Quality Marine&quot;, &quot;Saltwater Inc&quot;, &quot;Saltwaterfish&quot;, &quot;Sea Dwelling creatures&quot;, &quot;Segrest Farms&quot;, &quot;Strictly Reptiles Inc&quot;, &quot;Sun Pet LTD&quot;, &quot;Transship Discounts LTD&quot;, &quot;Underwater World&quot;, &quot;Walt Smith International&quot;) data$corp_classif&lt;- ifelse(data$corporation %in% corp_fashion, &quot;Fashion/Luxury/Design&quot;, ifelse(data$corporation %in% corp_animalproviders, &quot;Animal/animal prod. providers&quot;, ifelse(data$corporation %in% &quot;Museums&quot;, &quot;Museums&quot;, &quot;Others&quot;))) data$corporation&lt;-as.factor(data$corporation) data$corp_classif&lt;- as.factor(data$corp_classif) # Let&#39;s summarize and graph these corporations data_corporations&lt;- data %&gt;% group_by(corp_classif, corporation) %&gt;% dplyr::summarise(total=n(), percentage=n()/nrow(data)) %&gt;% arrange(desc(total)) %&gt;% filter(corporation!=&quot;Other&quot;) DT::datatable(data_corporations, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 10: &#39;, htmltools::em(&#39;Which American corporations are importing the most&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) data_corporations %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(15, percentage) %&gt;% plot_ly(x=~reorder(corporation, desc(percentage)), y=~percentage, color=~corp_classif) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Which American corporations are importing the most (Top 15)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;American corporation&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) ## Graph by classification data_corporations %&gt;% mutate(percentage=percentage*100) %&gt;% filter(corp_classif == &quot;Fashion/Luxury/Design&quot;) %&gt;% plot_ly(x=~reorder(corporation, desc(percentage)), y=~percentage, marker = list(color = &quot;coral&quot;)) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Fashion/Luxury/Design Corporations&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;American corporation&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) data_corporations %&gt;% mutate(percentage=percentage*100) %&gt;% filter(corp_classif == &quot;Animal/animal prod. providers&quot;) %&gt;% plot_ly(x=~reorder(corporation, desc(percentage)), y=~percentage, marker = list(color = &quot;green&quot;)) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Animal/animal prod. providers Corporations&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;American corporation&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(corp_animalproviders, corp_fashion, data_corporations) 3.2.5 foreign_co It represents the foreign party of the shipment There are 237,994 foreign parties The top 15 just represents 5.4% of data The top 50 just represents 12.4% of data foreign_co &lt;-data %&gt;% filter(!foreign_co == &quot;EXEMPTIONS 6 AND 7(C)&quot;) %&gt;% group_by(foreign_co) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(foreign_co) %&gt;% arrange(desc(percentage)) DT::datatable(foreign_co, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 11: &#39;, htmltools::em(&#39;Foreign party of the shipment&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) foreign_co %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(foreign_co, desc(percentage)), y=~percentage, color=~foreign_co) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Foreign party of the shipment (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Foreign party of the shipment&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(foreign_co) 3.3 Variables related with the product 3.3.1 description It represents the type/form of the wildlife product There are 88 types/forms Most of them are “Live specimens” (29.1%), followed by trophies (16.83%) and “Shell products” (9.49%). The top 15 represents 94.19% of data # Dropping unused levels data$description &lt;- droplevels(data$description) # Renaming levels) data &lt;- data %&gt;% mutate(description = recode(description, &quot;LIV&quot; = &quot;Live specimen&quot;, &quot;TRO&quot; = &quot;Trophy&quot;, &quot;SPR&quot; = &quot;Shell product&quot;, &quot;LPS&quot; = &quot;Leather product&quot;, &quot;JWL&quot; = &quot;Jewelry&quot;, &quot;GAR&quot; = &quot;Garment&quot;, &quot;SHO&quot; = &quot;Shoe&quot;, &quot;TRI&quot; = &quot;Trim&quot;, &quot;MEA&quot; = &quot;Meat&quot;, &quot;SPE&quot; = &quot;Specimen&quot;, &quot;SKI&quot; = &quot;Skin&quot;, &quot;BOD&quot; = &quot;Dead animal&quot;,&quot;LPL&quot; = &quot;Leather product&quot;, &quot;SHE&quot; = &quot;Shell&quot;, &quot;FEA&quot;= &quot;Feather&quot;, &quot;HOR&quot; = &quot;Horn&quot;, &quot;IVC&quot; =&quot;Ivory carving&quot;, &quot;IVP&quot; = &quot;Ivory piece&quot;, &quot;UNS&quot; = &quot;Unspecified&quot;)) description &lt;-data %&gt;% group_by(description) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(description) %&gt;% arrange(desc(percentage)) DT::datatable(description, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 12: &#39;, htmltools::em(&#39;Type/form of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) description %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(description, desc(percentage)), y=~percentage, color=~description) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Type/form of the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(description) 3.3.2 value It represents the reported value of every shipment in US dollars. - Lower values are more common than higher values - The min value is 0 dollars while the max value is 118,000,000 dollars - The halway point, the median, is 187$ - 50% of shipments are between 30 dollars (1st quartile) and 1260 dollars (3rd quartile) summary(data$value) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0 30 187 4805 1260 118000000 1868566 # Data between the minimum value and the 3rd quartile data %&gt;% filter(value&gt;=0 &amp; value&lt;=1260) %&gt;% plot_ly(x=~value, type=&#39;histogram&#39;, nbinsx = 40) %&gt;% layout(title = &quot;&lt;b&gt;Number of shipments with a value between 0 and 1260 US dollars.&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Value&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Count&lt;/b&gt;&quot;)) 3.3.3 purpose It represents the reason the wildlife product is being imported - There are 13 purpose levels - Commercial (74.6%) and “hunting trophies” (17.81%) purposes represent 92.41 % of the data. # Renaming levels) data &lt;- data %&gt;% mutate(purpose = recode(purpose, &quot;B&quot; = &quot;Breeding in captivity or artificial propagation&quot;, &quot;E&quot; = &quot;Educational&quot;, &quot;G&quot; = &quot;Botanical Gardens&quot;, &quot;H&quot; = &quot;Hunting trophies&quot;, &quot;M&quot; = &quot;Biomedical research&quot;, &quot;P&quot; = &quot;Personal&quot;, &quot;Q&quot; = &quot;Circuses/traveling exhibitions&quot;, &quot;S&quot; = &quot;Scientific&quot;, &quot;T&quot; = &quot;Commercial&quot;, &quot;Y&quot; = &quot;Reintroduction/introduction into the wild&quot;, &quot;Z&quot; = &quot;Zoos&quot;)) purpose &lt;-data %&gt;% group_by(purpose) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(purpose) %&gt;% arrange(desc(percentage)) DT::datatable(purpose, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 13: &#39;, htmltools::em(&#39;Reasons the wildlife products are being imported&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) purpose %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(purpose, desc(percentage)), y=~percentage, color=~purpose) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Reasons the wildlife products are being imported&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Purposes&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(purpose) 3.3.4 source It represents the type of source within the origin country (e.g., wild, bred) - There are 10 source levels - Specimens taken from the wild (77.9%) and animals bred in captivity (14.8%) sources represent 92.7 % of the data. # Renaming levels) data &lt;- data %&gt;% mutate(source = recode(source, &quot;W&quot; = &quot;Specimens taken from the wild&quot;, &quot;C&quot; = &quot;Animals bred in captivity&quot;, &quot;R&quot; = &quot;Specimens originating from a ranching operation&quot;, &quot;F&quot; = &quot;Animals born in captivity or not captive-bred&quot;, &quot;U&quot; = &quot;Source unknown&quot;, &quot;D&quot; = &quot;commercially bred or propagated in CITES&quot;, &quot;I&quot; = &quot;Confiscated or seized specimens&quot;, &quot;A&quot; = &quot;Plants artificially propagated, parts and derivates&quot;)) source &lt;-data %&gt;% group_by(source) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(source) %&gt;% arrange(desc(percentage)) DT::datatable(source, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 14: &#39;, htmltools::em(&#39;Types of source within the origin country&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) source %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(source, desc(percentage)), y=~percentage, color=~source) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Types of source within the origin country&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Sources&lt;/b&gt;&quot; ,tickangle=-65, tickfont = list(size = 10)), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(source) 3.3.5 species_code It represents the USFWS code for the wildlife product There are 15, 322 unique species codes The top 15 represents 30 % of data The top 50 represents 50.4% of data # Dropping unused levels data$species_code &lt;- droplevels(data$species_code) species_code &lt;-data %&gt;% group_by(species_code) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(species_code) %&gt;% arrange(desc(percentage)) DT::datatable(species_code, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 15: &#39;, htmltools::em(&#39;USFWS code for the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) species_code %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(species_code, desc(percentage)), y=~percentage, color=~species_code) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;USFWS code for the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;USFWS code&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(species_code) 3.3.6 taxa It represents the USFWS-derived broad taxonomic categorization There are 13 taxa levels There is a ‘taxa’ field for the vast majority (&gt;99%) of records Most of them are mammals (29.16%), followed by shells (20.34%), reptiles (13.29%) and corals (12.63%). These four categories represent 75,42% of data # Dropping unused levels data$taxa &lt;- droplevels(data$taxa) taxa &lt;-data %&gt;% group_by(taxa) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(taxa) %&gt;% arrange(desc(percentage)) DT::datatable(taxa, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 16: &#39;, htmltools::em(&#39;USFWS-derived broad taxonomic categorization&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) taxa %&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~reorder(taxa, desc(percentage)), y=~percentage, color=~taxa) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;USFWS-derived broad taxonomic categorization&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(taxa) 3.3.7 class It represents the EHA-derived class-level taxonomic designation - There are 53 classes - The top 15 represents 93% of data # Dropping unused levels data$class &lt;- droplevels(data$class) class &lt;-data %&gt;% group_by(class) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(class) %&gt;% arrange(desc(percentage)) DT::datatable(class, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 17: &#39;, htmltools::em(&#39; EHA-derived class-level taxonomic designation&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) class %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(class, desc(percentage)), y=~percentage, color=~class) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;EHA-derived class-level taxonomic designation (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Class&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(class) 3.3.8 genus It represents the Genus (or higher-level taxonomic name) of the wildlife product There are 6,335 genus levels The top 15 represents 33.4 of data The top 50 represents 57.3% of data # Dropping unused levels data$genus &lt;- droplevels(data$genus) genus &lt;-data %&gt;% group_by(genus) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(genus) %&gt;% arrange(desc(percentage)) DT::datatable(genus, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 18: &#39;, htmltools::em(&#39;Genus (or higher-level taxonomic name) of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) genus %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(genus, desc(percentage)), y=~percentage, color=~genus) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Genus (or higher-level taxonomic name) of the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Genus&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(genus) 3.3.9 species It represents species of the wildlife product. To get a more ilustrative name, we’ll combine genus and species. After removing generics, there are 8,082 different species The top 15 represents 23.8 % of data The top 50 represents 38.3 % of data # Dropping unused levels data$species &lt;- droplevels(data$species) # Removing generics species&lt;- data %&gt;% filter(!species %in% c(&quot;maxima&quot;, &quot;sp.&quot;, &quot;in trop fish &amp;&quot;, &quot;(marine sp.)&quot;, &quot;(freshwater sp.)&quot;, &quot;(including goldfish)&quot;)) %&gt;% drop_na(species) # Combine genus + species species &lt;- species %&gt;% mutate(species = as.factor(paste(genus, &quot;-&quot;,species))) species &lt;-species %&gt;% group_by(species) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(species) %&gt;% arrange(desc(percentage)) DT::datatable(species, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 19: &#39;, htmltools::em(&#39;Species of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) species %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(species, desc(percentage)), y=~percentage, color=~species) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Species of the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Species&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Combine genus + species in the dataset data &lt;- data %&gt;% mutate(species = as.factor(paste(genus, &quot;-&quot;,species))) rm(species) 3.3.10 subspecies It represents subspecies of the wildlife product There are 439 subspecies levels The top 15 just represents 2.5% of data The top 50 just represents 2.6% of data # Dropping unused levels data$subspecies &lt;- droplevels(data$subspecies) subspecies &lt;-data %&gt;% group_by(subspecies) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% filter(subspecies!=&quot;other shipments&quot;) %&gt;% drop_na(subspecies) %&gt;% arrange(desc(percentage)) DT::datatable(subspecies, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 20: &#39;, htmltools::em(&#39;Subespecies of the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) subspecies %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(subspecies, desc(percentage)), y=~percentage, color=~subspecies) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Subespecies of the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Subespecies&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(subspecies) 3.3.11 generic_name It represents a general common name for the wildlife product There are 1,987 generic names levels The top 15 represents 49.3% of data The top 50 represents 71.6% of data # Dropping unused levels data$generic_name &lt;- droplevels(data$generic_name) generic_name &lt;-data %&gt;% group_by(generic_name) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(generic_name) %&gt;% arrange(desc(percentage)) DT::datatable(generic_name, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 21: &#39;, htmltools::em(&#39;General common names for the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) generic_name %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(generic_name, desc(percentage)), y=~percentage, color=~generic_name) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;General common names for the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Generic Name&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) rm(generic_name) 3.3.12 specific_name It represents a specific common name for the wildlife product. For getting a more ilustrative name, we’ll combine generic_name and specific_name After removing empty values, there are 10,435 combinations of generic_name and specific_name The top 15 represents 25.3% of data The top 50 represents 41.3.6% of data # Dropping unused levels data$specific_name &lt;- droplevels(data$specific_name) # Removing generics specific_name&lt;- data %&gt;% drop_na(specific_name) # Combine genus + species specific_name &lt;- specific_name %&gt;% mutate(specific_name = paste(generic_name, &quot;-&quot;,specific_name)) specific_name &lt;-specific_name %&gt;% group_by(specific_name) %&gt;% summarise(total = n(), percentage=n()/nrow(data)) %&gt;% drop_na(specific_name) %&gt;% arrange(desc(percentage)) DT::datatable(specific_name, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 22: &#39;, htmltools::em(&#39;Specific common names for the wildlife product&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) specific_name %&gt;% mutate(percentage=percentage*100) %&gt;% top_n(20, percentage) %&gt;% plot_ly(x=~reorder(specific_name, desc(percentage)), y=~percentage, color=~specific_name) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Specific common names for the wildlife product (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Specific Name&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage&lt;/b&gt;&quot;)) # Combine generic_name and specific_name in the dataset data &lt;- data %&gt;% mutate(specific_name = paste(generic_name, &quot;-&quot;,specific_name)) rm(specific_name) 3.4 More data cleaning after exploratory analysis Let’s exclude from the analysis those descriptions with less than 10 instances. We reduce the number of descriptions from 88 to 78 data&lt;-data %&gt;% group_by(description) %&gt;% filter(n()&gt;=10) # 5,451,832 &lt;- 5,451,800 rows # Dropping unused levels data$description &lt;- droplevels(data$description) Let’s exclude from the analysis those species with less than 10 instances. We reduce the number of species from 8,088 to 6,426 data&lt;-data %&gt;% group_by(species) %&gt;% filter(n()&gt;=10) # 5,451,800 &lt;- 5,421,893 rows # Dropping unused levels data$species &lt;- droplevels(data$species) "],
["trends-over-time.html", "Chapter 4 Trends over time 4.1 Shipments 4.2 Import (US dollars) 4.3 Quantity (number of items and kg) 4.4 Refused shipments", " Chapter 4 Trends over time Let’s explore how some trends change over time. 4.1 Shipments Let’s summarized the number of unique shipments per month. unique_shipments_year &lt;-data %&gt;% group_by(year= year(shipment_date),month = month(shipment_date)) %&gt;% summarise(unique_shipments = n_distinct(control_number)) unique_shipments_year$date &lt;- as.yearmon(paste(unique_shipments_year$year, unique_shipments_year$month), &quot;%Y %m&quot;) highchart()%&gt;% hc_add_series(unique_shipments_year, &quot;line&quot;, hcaes(x = date, y = unique_shipments)) %&gt;% hc_xAxis(title=list(text=&quot;Date&quot;)) %&gt;% hc_yAxis(title=list(text=&quot;Unique shipments&quot;)) %&gt;% hc_title(text=&quot;Number of unique shipments per month&quot;) Let’s see the pattern depending on the week of the year We have excluded from the figure the 1st, 52nd and 53rd week of the year. unique_shipments_week &lt;-data %&gt;% group_by(year= year(shipment_date), week=week(shipment_date)) %&gt;% summarise(unique_shipments = n_distinct(control_number)) %&gt;% ungroup() %&gt;% filter(!week %in% c(1, 52, 53)) highchart()%&gt;% hc_add_series(unique_shipments_week, &quot;line&quot;, hcaes(x = week, y = unique_shipments, group=year)) %&gt;% hc_xAxis(title=list(text=&quot;Date&quot;)) %&gt;% hc_yAxis(title=list(text=&quot;Unique shipments&quot;)) %&gt;% hc_title(text=&quot;Number of unique shipments depending on the week of the year&quot;) rm(unique_shipments_year) rm(unique_shipments_week) 4.2 Import (US dollars) It’s important to take into account that since year 2008, this variable has a lot of missing values (check the 2.1. section) So, we can just calculate the total import for the period between 2000-2007, and also for the year 2012. It seems there has been an upward trend in the amount of spent US dollars from 2000 to 2012. 4.2.1 Measured by disposition year value_wildlifeproduct_dispyear &lt;-data %&gt;% dplyr::filter(!is.na(value)) %&gt;% dplyr::filter(!disposition_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) %&gt;% group_by(disposition_year) %&gt;% summarise(value = sum(as.numeric(value))) value_wildlifeproduct_dispyear$disposition_year &lt;- droplevels(value_wildlifeproduct_dispyear$disposition_year) DT::datatable(value_wildlifeproduct_dispyear, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 23: &#39;, htmltools::em(&#39;Import (US dollars) by disposition year&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;) value_wildlifeproduct_dispyear %&gt;% plot_ly(x=~disposition_year, y=~value, color=~disposition_year) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by disposition year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Disposition Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) rm(value_wildlifeproduct_dispyear) 4.2.2 Measured by shipment year value_wildlifeproduct_shipyear &lt;-data %&gt;% filter(!is.na(value)) %&gt;% filter(!is.na(shipment_year)) %&gt;% filter(!shipment_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) %&gt;% group_by(shipment_year) %&gt;% summarise(value = sum(as.numeric(value))) value_wildlifeproduct_shipyear$shipment_year &lt;- droplevels(value_wildlifeproduct_shipyear$shipment_year) DT::datatable(value_wildlifeproduct_shipyear, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 24: &#39;, htmltools::em(&#39;Import (US dollars) by shipment year&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;) value_wildlifeproduct_shipyear %&gt;% plot_ly(x=~shipment_year, y=~value, color=~shipment_year) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by shipment year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) rm(value_wildlifeproduct_shipyear) 4.2.3 By taxa and shipment year value_bytaxayear&lt;- data %&gt;% group_by(taxa, shipment_year) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% dplyr::ungroup() %&gt;% filter(!shipment_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) DT::datatable(value_bytaxayear, filter = &#39;top&#39;, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 25: &#39;, htmltools::em(&#39;Import (US dollars) by shipment year &amp; taxa&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) Here you have a dynamic graph, where you can choose the specific taxa elements you want to display value_bytaxayear$shipment_year&lt;- as.numeric(as.character(value_bytaxayear$shipment_year)) value_bytaxayear &lt;- highlight_key(value_bytaxayear) widgets &lt;- bscols( widths = c(12, 12, 12), filter_select(&quot;taxa&quot;,&quot;taxa&quot;, value_bytaxayear, ~taxa), filter_slider(&quot;Shipment Year&quot;, &quot;Years&quot;, value_bytaxayear, ~shipment_year) ) bscols( widths = c(4, 8), widgets, plot_ly(value_bytaxayear, x = ~shipment_year, y = ~value) %&gt;% add_lines(color = ~taxa, colors = &quot;Dark2&quot;) %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by shipment year &amp; taxa&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ) taxa Years rm(widgets,value_bytaxayear) 4.2.4 By description and shipment year value_bydescriptionyear&lt;- data %&gt;% group_by(description, shipment_year) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% dplyr::ungroup() %&gt;% filter(!shipment_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) DT::datatable(value_bydescriptionyear, filter = &#39;top&#39;, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 26: &#39;, htmltools::em(&#39;Import (US dollars) by shipment year &amp; description&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) Here you have a dynamic graph, where you can choose the specific descriptions you want to display value_bydescriptionyear$shipment_year&lt;- as.numeric(as.character(value_bydescriptionyear$shipment_year)) value_bydescriptionyear &lt;- highlight_key(value_bydescriptionyear) widgets &lt;- bscols( widths = c(12, 12, 12), filter_select(&quot;description&quot;,&quot;description&quot;, value_bydescriptionyear, ~description), filter_slider(&quot;Shipment Year&quot;, &quot;Years&quot;, value_bydescriptionyear, ~shipment_year) ) bscols( widths = c(4, 8), widgets, plot_ly(value_bydescriptionyear, x = ~shipment_year, y = ~value) %&gt;% add_lines(color = ~description, colors = &quot;Dark2&quot;) %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by shipment year &amp; description&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ) description Years rm(widgets, value_bydescriptionyear) 4.2.5 By name (generic + specific) and shipment year value_byname&lt;- data %&gt;% group_by(specific_name, shipment_year) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% dplyr::ungroup() %&gt;% filter(!shipment_year %in% (c(2008, 2009, 2010, 2011, 2013, 2014))) DT::datatable(value_byname, filter = &#39;top&#39;, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 27: &#39;, htmltools::em(&#39;Import (US dollars) by shipment year &amp; specific name&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) Here you have a dynamic graph, where you can choose the specific names you want to display. We have selected the top 100 based on the total spent US dollars. total_byname&lt;- data %&gt;% group_by(specific_name) %&gt;% filter(!is.na(value))%&gt;% summarise(value=sum(as.numeric(value))) %&gt;% arrange(desc(value)) %&gt;% top_n(100) ## Selecting by value value_byname&lt;- value_byname %&gt;% mutate(shipment_year=as.numeric(as.character(shipment_year))) %&gt;% dplyr::filter(specific_name %in% total_byname$specific_name) value_byname &lt;- highlight_key(value_byname) widgets &lt;- bscols( widths = c(12, 12, 12), filter_select(&quot;specific name&quot;,&quot;specific name&quot;, value_byname, ~specific_name), filter_slider(&quot;Shipment Year&quot;, &quot;Years&quot;, value_byname, ~shipment_year) ) bscols( widths = c(4, 8), widgets, plot_ly(value_byname, x = ~shipment_year, y = ~value) %&gt;% add_lines(color = ~specific_name, colors = &quot;Dark2&quot;) %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by shipment year &amp; specific name&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ) specific name Years rm(widgets, total_byname, value_byname) 4.3 Quantity (number of items and kg) Let’s summarized the quantity brought per year. We’ll only include in the analysis those items measured in “number” and “kg” units, because they represent 99.45% of the data. quantity_year&lt;- data %&gt;% filter(unit==&quot;Number&quot;| unit==&quot;Kilograms&quot;) quantity_year_summary&lt;- quantity_year %&gt;% group_by(shipment_year, unit) %&gt;% summarise(quantity = sum(quantity)) DT::datatable(quantity_year_summary, filter = &#39;top&#39;, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 28: &#39;, htmltools::em(&#39;Quantity by shipment year&#39; ))) %&gt;% formatCurrency(&#39;quantity&#39;, currency = &quot;&quot;,interval = 3, mark = &quot;,&quot;) quantity_year_summary[quantity_year_summary$unit== &quot;Number&quot;, ] %&gt;% plot_ly(x=~shipment_year, y=~quantity) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Quantity (number of items) by shipment year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Quantity (number of items)&lt;/b&gt;&quot;)) quantity_year_summary[quantity_year_summary$unit== &quot;Kilograms&quot;, ] %&gt;% plot_ly(x=~shipment_year, y=~quantity) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Quantity (Kilograms) by shipment year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Quantity (Kilograms)&lt;/b&gt;&quot;)) rm(quantity_year, quantity_year_summary) 4.4 Refused shipments As we found in section 4.1.4., just 1.73% of shipments were refused. This would be the trend over time refused_shipments&lt;- data %&gt;% filter(!is.na(action)) %&gt;% group_by(shipment_year, action) %&gt;% summarise(total = n()) %&gt;% mutate(percentage = total/sum(total)) %&gt;% dplyr::filter(action==&quot;Refused&quot;) DT::datatable(refused_shipments, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 29: &#39;, htmltools::em(&#39;Refused shipments by shipment year&#39; ))) %&gt;% formatRound(&#39;total&#39;,1) %&gt;% formatPercentage(&#39;percentage&#39;,2) refused_shipments%&gt;% mutate(percentage=percentage*100) %&gt;% plot_ly(x=~shipment_year, y=~percentage) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Refused shipments by shipment year&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Shipment Year&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Percentage of refused shipments&lt;/b&gt;&quot;)) rm(refused_shipments) "],
["explore-other-topics.html", "Chapter 5 Explore other topics 5.1 Total import (US dollars) by taxa 5.2 Average import (US dollars) by taxa (for those with number and kg units) 5.3 Total import (US dollars) by description 5.4 Average import (US dollars) by description (for those with number and kg units) 5.5 Total import (US dollars) by name", " Chapter 5 Explore other topics 5.1 Total import (US dollars) by taxa total_bytaxa&lt;- data %&gt;% group_by(taxa) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% arrange(desc(value)) DT::datatable(total_bytaxa, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 30: &#39;, htmltools::em(&#39;Import (US dollars) by taxa&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) total_bytaxa %&gt;% plot_ly(x=~reorder(taxa, desc(value)), y=~value, color=~taxa) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by taxa&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) rm(total_bytaxa) 5.2 Average import (US dollars) by taxa (for those with number and kg units) average_bytaxa&lt;- data %&gt;% filter(unit==&quot;Number&quot;| unit==&quot;Kilograms&quot;) %&gt;% group_by(taxa, unit) %&gt;% filter(!is.na(value)) %&gt;% summarise(import_median_per_shipment=round(median(as.numeric(value)),2), import_median_per_unit = round(median(as.numeric(value)/quantity, na.rm=TRUE),2)) %&gt;% arrange(desc(import_median_per_shipment)) DT::datatable(average_bytaxa, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 31: &#39;, htmltools::em(&#39;Average import by taxa&#39; ))) %&gt;% formatCurrency(&#39;import_median_per_shipment&#39;,currency = &quot;$&quot;, interval = 3, mark = &quot;,&quot;) %&gt;% formatCurrency(&#39;import_median_per_unit&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) average_bytaxa[average_bytaxa$unit== &quot;Number&quot;, ] %&gt;% plot_ly(x=~reorder(taxa, desc(import_median_per_unit)), y=~import_median_per_unit) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Average import per unit by taxa (items measured by numbers)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Average import (US dollars)&lt;/b&gt;&quot;)) average_bytaxa[average_bytaxa$unit== &quot;Kilograms&quot;, ] %&gt;% plot_ly(x=~reorder(taxa, desc(import_median_per_unit)), y=~import_median_per_unit) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Average import per unit by taxa (items measured by Kilograms)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Average import (US dollars)&lt;/b&gt;&quot;)) rm(average_bytaxa) 5.3 Total import (US dollars) by description value_bydescription&lt;- data %&gt;% group_by(description) %&gt;% filter(!is.na(value)) %&gt;% summarise(value=sum(as.numeric(value))) %&gt;% arrange(desc(value)) DT::datatable(value_bydescription, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 32: &#39;, htmltools::em(&#39;Import (US dollars) by description&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) value_bydescription %&gt;% top_n(20) %&gt;% plot_ly(x=~reorder(description, desc(value)), y=~value, color=~description) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by description (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Taxa&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ## Selecting by value rm(value_bydescription) 5.4 Average import (US dollars) by description (for those with number and kg units) average_bydescription&lt;- data %&gt;% filter(unit==&quot;Number&quot;| unit==&quot;Kilograms&quot;) %&gt;% group_by(description, unit) %&gt;% filter(!is.na(value)) %&gt;% summarise(import_median_per_shipment = round(median(as.numeric(value)),2), import_median_per_unit = round(median(as.numeric(value)/quantity, na.rm = TRUE),2)) %&gt;% arrange(desc(import_median_per_shipment)) DT::datatable(average_bydescription, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 33: &#39;, htmltools::em(&#39;Average import by description (for those with number and kg units)&#39; ))) %&gt;% formatCurrency(&#39;import_median_per_shipment&#39;,currency = &quot;$&quot;, interval = 3, mark = &quot;,&quot;) %&gt;% formatCurrency(&#39;import_median_per_unit&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) average_bydescription[average_bydescription$unit== &quot;Number&quot;, ] %&gt;% ungroup()%&gt;% top_n(15, import_median_per_unit) %&gt;% plot_ly(x=~reorder(description, desc(import_median_per_unit)), y=~import_median_per_unit) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Average import per unit by description (items measured by numbers)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Average import (US dollars)&lt;/b&gt;&quot;)) average_bydescription[average_bydescription$unit== &quot;Kilograms&quot;, ] %&gt;% ungroup()%&gt;% top_n(15, import_median_per_unit) %&gt;% plot_ly(x=~reorder(description, desc(import_median_per_unit)), y=~import_median_per_unit) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Average import per unit by description (items measured by Kilograms)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Description&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;Average import (US dollars)&lt;/b&gt;&quot;)) rm(average_bydescription) 5.5 Total import (US dollars) by name total_byname&lt;- data %&gt;% group_by(specific_name) %&gt;% filter(!is.na(value))%&gt;% summarise(value=sum(as.numeric(value))) %&gt;% arrange(desc(value)) DT::datatable(total_byname, caption = htmltools::tags$caption( style=&#39;caption-side: bottom; text-align: center;&#39;,&#39;Table 34: &#39;, htmltools::em(&#39;Import (US dollars) by name&#39; ))) %&gt;% formatCurrency(&#39;value&#39;, currency = &quot;$&quot;,interval = 3, mark = &quot;,&quot;) total_byname %&gt;% top_n(20) %&gt;% plot_ly(x=~reorder(specific_name, desc(value)), y=~value, color=~specific_name) %&gt;% add_bars() %&gt;% layout(title = &quot;&lt;b&gt;Import (US dollars) by name (Top 20)&lt;/b&gt;&quot;, xaxis= list(title= &quot;&lt;b&gt;Name&lt;/b&gt;&quot; ,tickangle=-65), yaxis = list(title = &quot;&lt;b&gt;US dollars&lt;/b&gt;&quot;)) ## Selecting by value rm(total_byname) "],
["work-in-progress.html", "Chapter 6 Work in progress", " Chapter 6 Work in progress Complete the summary section Add colored maps "],
["references.html", "References", " References Sources: https://www.iucnredlist.org/ http://www.catalogueoflife.org/ https://plants.usda.gov/classification.html "]
]
